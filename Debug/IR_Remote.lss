
IR_Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000fb2  00001046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  0080016e  0080016e  000010b4  2**0
                  ALLOC
  3 .stab         0000405c  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e9e  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005fae  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002c8  00000000  00000000  00005fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ef4  00000000  00000000  000062a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001378  00000000  00000000  00009199  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a3e  00000000  00000000  0000a511  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000071c  00000000  00000000  0000bf50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a9a  00000000  00000000  0000c66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000233f  00000000  00000000  0000d106  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000228  00000000  00000000  0000f445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return buffer;
}


char* FloatToArray(float analogin, int vref, int analogconversion)
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	int x, zero= 1, scope =0;
	int y = (integer-1);
	float divisor, voltagecalc;
	scope = pow(2.0, (analogBit));
	/*This section takes care of the type of conversion (int or analog with vref) */
if (analogconversion == 1) { voltagecalc = ((analogin*vref)/ scope); }
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
		else {
			divisor =  pow(10.0, (y)); // used for the division factor. will decrease. 
			if (((voltagecalc/divisor) <= 1) & (x <= integer) & (zero == 1)) { buffer[x] = 0x20;}  // removes extra zeros on the integer end ie will never display 10 as 0010. 
			else { buffer[x] = (0x30 + (voltagecalc/divisor)); zero = 0; }  // the addition of 0x30 is to convert the number to an assci value 
			voltagecalc = fmod(voltagecalc,divisor);  // keep the remainder, ditch the rest. 
			y--;  
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e6       	ldi	r26, 0x6E	; 110
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
if (analogconversion == 1) { voltagecalc = ((analogin*vref)/ scope); }
		else {( voltagecalc = analogin); vref = 1;}
	
	/*This section is responsible for the conversion of the float into the array of characters */
	for (x = 0; x < (integer+fractional+1) ; x++ ){  
		if (x == integer){buffer[x] = '.'; } // place decimal point when x = the number integers  
  94:	a9 37       	cpi	r26, 0x79	; 121
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 d7 07 	jmp	0xfae	; 0xfae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Initalize>:
		else {
			divisor =  pow(10.0, (y)); // used for the division factor. will decrease. 
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	80 63       	ori	r24, 0x30	; 48
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	10 92 b9 00 	sts	0x00B9, r1
  b6:	88 e4       	ldi	r24, 0x48	; 72
  b8:	80 93 b8 00 	sts	0x00B8, r24
  bc:	85 e4       	ldi	r24, 0x45	; 69
  be:	80 93 bc 00 	sts	0x00BC, r24
  c2:	08 95       	ret

000000c4 <USART_init>:
  c4:	10 92 c5 00 	sts	0x00C5, r1
  c8:	87 e6       	ldi	r24, 0x67	; 103
			if (((voltagecalc/divisor) <= 1) & (x <= integer) & (zero == 1)) { buffer[x] = 0x20;}  // removes extra zeros on the integer end ie will never display 10 as 0010. 
  ca:	80 93 c4 00 	sts	0x00C4, r24
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24
  da:	08 95       	ret

000000dc <USART_send>:
  dc:	e0 ec       	ldi	r30, 0xC0	; 192
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	95 ff       	sbrs	r25, 5
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <USART_send+0x4>
  e6:	80 93 c6 00 	sts	0x00C6, r24
  ea:	08 95       	ret

000000ec <main>:
  ec:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_init>
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	8e e6       	ldi	r24, 0x6E	; 110
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <fdevopen>
  fc:	88 e5       	ldi	r24, 0x58	; 88
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	9f 93       	push	r25
 102:	8f 93       	push	r24
 104:	0e 94 b3 03 	call	0x766	; 0x766 <printf>
 108:	53 9a       	sbi	0x0a, 3	; 10
 10a:	52 98       	cbi	0x0a, 2	; 10
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Initalize>
 110:	0e 94 17 03 	call	0x62e	; 0x62e <_74HC164_Initialize>
 114:	20 9a       	sbi	0x04, 0	; 4
 116:	21 9a       	sbi	0x04, 1	; 4
 118:	28 9a       	sbi	0x05, 0	; 5
 11a:	29 9a       	sbi	0x05, 1	; 5
 11c:	0e 94 ae 00 	call	0x15c	; 0x15c <IR_Initalize>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 6e 01 	sts	0x016E, r24
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	5b 9a       	sbi	0x0b, 3	; 11
 12c:	8f e8       	ldi	r24, 0x8F	; 143
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	01 97       	sbiw	r24, 0x01	; 1
			else { buffer[x] = (0x30 + (voltagecalc/divisor)); zero = 0; }  // the addition of 0x30 is to convert the number to an assci value 
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x44>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x4a>
 136:	00 00       	nop
 138:	5b 98       	cbi	0x0b, 3	; 11
 13a:	8f e8       	ldi	r24, 0x8F	; 143
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x52>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x58>
 144:	00 00       	nop
 146:	80 91 28 02 	lds	r24, 0x0228
 14a:	88 23       	and	r24, r24
 14c:	71 f3       	breq	.-36     	; 0x12a <main+0x3e>
 14e:	10 92 7f 01 	sts	0x017F, r1
 152:	0e 94 d6 02 	call	0x5ac	; 0x5ac <IR_Fun>
 156:	10 92 28 02 	sts	0x0228, r1
			voltagecalc = fmod(voltagecalc,divisor);  // keep the remainder, ditch the rest. 
 15a:	e7 cf       	rjmp	.-50     	; 0x12a <main+0x3e>

0000015c <IR_Initalize>:
 15c:	e9 e6       	ldi	r30, 0x69	; 105
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	81 60       	ori	r24, 0x01	; 1
 164:	80 83       	st	Z, r24
 166:	e8 9a       	sbi	0x1d, 0	; 29
 168:	78 94       	sei
 16a:	e1 e8       	ldi	r30, 0x81	; 129
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	83 60       	ori	r24, 0x03	; 3
 172:	80 83       	st	Z, r24
 174:	10 92 2c 02 	sts	0x022C, r1
	/*This section takes care of the type of conversion (int or analog with vref) */
if (analogconversion == 1) { voltagecalc = ((analogin*vref)/ scope); }
		else {( voltagecalc = analogin); vref = 1;}
	
	/*This section is responsible for the conversion of the float into the array of characters */
	for (x = 0; x < (integer+fractional+1) ; x++ ){  
 178:	10 92 2b 02 	sts	0x022B, r1
 17c:	10 92 70 01 	sts	0x0170, r1
 180:	10 92 6f 01 	sts	0x016F, r1
 184:	10 92 2e 02 	sts	0x022E, r1
 188:	10 92 2d 02 	sts	0x022D, r1
 18c:	10 92 28 02 	sts	0x0228, r1
	return buffer;
}


char* FloatToArray(float analogin, int vref, int analogconversion)
{
 190:	10 92 7f 01 	sts	0x017F, r1
 194:	10 92 71 01 	sts	0x0171, r1
 198:	10 92 80 01 	sts	0x0180, r1
 19c:	10 92 29 02 	sts	0x0229, r1
 1a0:	10 92 72 01 	sts	0x0172, r1
 1a4:	10 92 84 01 	sts	0x0184, r1
 1a8:	10 92 2a 02 	sts	0x022A, r1
 1ac:	10 92 85 01 	sts	0x0185, r1
 1b0:	10 92 6e 01 	sts	0x016E, r1
			else { buffer[x] = (0x30 + (voltagecalc/divisor)); zero = 0; }  // the addition of 0x30 is to convert the number to an assci value 
			voltagecalc = fmod(voltagecalc,divisor);  // keep the remainder, ditch the rest. 
			y--;  
		}
	}
	buffer[integer+fractional+2] ='\0';  // always terminate with a null character to eliminate the possibility of erronous characters. 
 1b4:	10 92 7e 01 	sts	0x017E, r1
	return buffer;
}
 1b8:	10 92 7d 01 	sts	0x017D, r1
 1bc:	10 92 83 01 	sts	0x0183, r1
 1c0:	10 92 82 01 	sts	0x0182, r1
 1c4:	10 92 87 01 	sts	0x0187, r1
 1c8:	10 92 86 01 	sts	0x0186, r1
 1cc:	08 95       	ret

000001ce <IR_Compare>:
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	20 91 85 01 	lds	r18, 0x0185
 1e2:	c1 2c       	mov	r12, r1
 1e4:	d1 2c       	mov	r13, r1
 1e6:	e1 2c       	mov	r14, r1
 1e8:	f1 2c       	mov	r15, r1
 1ea:	01 e0       	ldi	r16, 0x01	; 1
		for (char _count_16=0; _count_16 < 16; _count_16++)
		{
			_IR_input_temp = ( _IR_Input[_count]  );
			_Existing_input_temp = ( _Existing_Code[_count] );
			
			_IR_input_temp &=   (1 << _count_16);
 1ec:	10 e0       	ldi	r17, 0x00	; 0
 1ee:	31 c0       	rjmp	.+98     	; 0x252 <IR_Compare+0x84>
 1f0:	a8 01       	movw	r20, r16
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <IR_Compare+0x2c>
 1f6:	44 0f       	add	r20, r20
 1f8:	55 1f       	adc	r21, r21
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <IR_Compare+0x28>
 1fe:	fa 01       	movw	r30, r20
 200:	ec 23       	and	r30, r28
 202:	fd 23       	and	r31, r29
			_Existing_input_temp &= (1 << _count_16);
 204:	4a 23       	and	r20, r26
 206:	5b 23       	and	r21, r27
			
			if (_IR_input_temp == _Existing_input_temp)
 208:	e4 17       	cp	r30, r20
 20a:	f5 07       	cpc	r31, r21
 20c:	09 f4       	brne	.+2      	; 0x210 <IR_Compare+0x42>
			analyze++;
 20e:	d3 94       	inc	r13
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
	char analyze =0;
	int _IR_input_temp =0, _Existing_input_temp=0;
	
	for (char _count=0; _count < (((_IR_Clock_Pulses) /16) +1 ); _count++){
		
		for (char _count_16=0; _count_16 < 16; _count_16++)
 214:	20 31       	cpi	r18, 0x10	; 16
 216:	31 05       	cpc	r19, r1
 218:	59 f7       	brne	.-42     	; 0x1f0 <IR_Compare+0x22>
			if (_IR_input_temp == _Existing_input_temp)
			analyze++;
			
		}
		
		if (analyze >= ((((_IR_Clock_Pulses) /16) +1 )*16)  -2)
 21a:	20 91 85 01 	lds	r18, 0x0185
 21e:	4d 2d       	mov	r20, r13
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	22 95       	swap	r18
 224:	2f 70       	andi	r18, 0x0F	; 15
 226:	e0 e1       	ldi	r30, 0x10	; 16
 228:	2e 9f       	mul	r18, r30
 22a:	90 01       	movw	r18, r0
 22c:	11 24       	eor	r1, r1
 22e:	22 5f       	subi	r18, 0xF2	; 242
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	42 17       	cp	r20, r18
 234:	53 07       	cpc	r21, r19
 236:	ec f4       	brge	.+58     	; 0x272 <IR_Compare+0xa4>

char IR_Compare(int *_IR_Input, int * _Existing_Code){
	char analyze =0;
	int _IR_input_temp =0, _Existing_input_temp=0;
	
	for (char _count=0; _count < (((_IR_Clock_Pulses) /16) +1 ); _count++){
 238:	c3 94       	inc	r12
 23a:	20 91 85 01 	lds	r18, 0x0185
 23e:	4c 2d       	mov	r20, r12
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	22 95       	swap	r18
 244:	2f 70       	andi	r18, 0x0F	; 15
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	3f 4f       	sbci	r19, 0xFF	; 255
 24c:	42 17       	cp	r20, r18
 24e:	53 07       	cpc	r21, r19
 250:	94 f4       	brge	.+36     	; 0x276 <IR_Compare+0xa8>
		
		for (char _count_16=0; _count_16 < 16; _count_16++)
		{
			_IR_input_temp = ( _IR_Input[_count]  );
 252:	2c 2d       	mov	r18, r12
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	fc 01       	movw	r30, r24
 25c:	e2 0f       	add	r30, r18
 25e:	f3 1f       	adc	r31, r19
 260:	c0 81       	ld	r28, Z
 262:	d1 81       	ldd	r29, Z+1	; 0x01
			_Existing_input_temp = ( _Existing_Code[_count] );
 264:	fb 01       	movw	r30, r22
 266:	e2 0f       	add	r30, r18
 268:	f3 1f       	adc	r31, r19
 26a:	a0 81       	ld	r26, Z
 26c:	b1 81       	ldd	r27, Z+1	; 0x01
 26e:	97 01       	movw	r18, r14
 270:	bf cf       	rjmp	.-130    	; 0x1f0 <IR_Compare+0x22>
			analyze++;
			
		}
		
		if (analyze >= ((((_IR_Clock_Pulses) /16) +1 )*16)  -2)
			return 1;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	01 c0       	rjmp	.+2      	; 0x278 <IR_Compare+0xaa>

		//printf("\n\r %d", analyze);

	}
	
	return 0;
 276:	80 e0       	ldi	r24, 0x00	; 0
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	08 95       	ret

0000028a <__vector_1>:





ISR(INT0_vect){
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
	// Store the Value of TCNT1 asap 
	_Delay_Time = TCNT1; 
 2ac:	80 91 84 00 	lds	r24, 0x0084
 2b0:	90 91 85 00 	lds	r25, 0x0085
 2b4:	90 93 7e 01 	sts	0x017E, r25
 2b8:	80 93 7d 01 	sts	0x017D, r24
	
	if (_Delay_2_Trigger){
 2bc:	20 91 6f 01 	lds	r18, 0x016F
 2c0:	30 91 70 01 	lds	r19, 0x0170
 2c4:	23 2b       	or	r18, r19
 2c6:	09 f4       	brne	.+2      	; 0x2ca <__vector_1+0x40>
 2c8:	af c0       	rjmp	.+350    	; 0x428 <__vector_1+0x19e>
		// only record the on states, if the signal is pulled low recored it!
		if (!CHECKBIT(IR_PIN_PORT, IRpin_PIN ) && _Delay_Time < 4000)
 2ca:	4a 99       	sbic	0x09, 2	; 9
 2cc:	59 c0       	rjmp	.+178    	; 0x380 <__vector_1+0xf6>
 2ce:	80 3a       	cpi	r24, 0xA0	; 160
 2d0:	2f e0       	ldi	r18, 0x0F	; 15
 2d2:	92 07       	cpc	r25, r18
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <__vector_1+0x4e>
 2d6:	54 c0       	rjmp	.+168    	; 0x380 <__vector_1+0xf6>
		{
			_count_delay=0;
 2d8:	10 92 29 02 	sts	0x0229, r1
			
			for ( ;_count_delay < _Delay_Time / delay; _count_delay++)
 2dc:	20 91 29 02 	lds	r18, 0x0229
 2e0:	60 91 86 01 	lds	r22, 0x0186
 2e4:	70 91 87 01 	lds	r23, 0x0187
 2e8:	0e 94 40 03 	call	0x680	; 0x680 <__udivmodhi4>
 2ec:	46 2f       	mov	r20, r22
 2ee:	57 2f       	mov	r21, r23
 2f0:	82 2f       	mov	r24, r18
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	84 17       	cp	r24, r20
 2f6:	95 07       	cpc	r25, r21
 2f8:	e8 f5       	brcc	.+122    	; 0x374 <__vector_1+0xea>
			{

 					_Store_Input_Signal[_binary_array_counter_] += (1 << (_count_delay + _binary_counter_) );
 2fa:	a1 e0       	ldi	r26, 0x01	; 1
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e0 91 80 01 	lds	r30, 0x0180
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	20 91 29 02 	lds	r18, 0x0229
 308:	80 91 71 01 	lds	r24, 0x0171
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e1 5d       	subi	r30, 0xD1	; 209
 312:	fd 4f       	sbci	r31, 0xFD	; 253
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	82 0f       	add	r24, r18
 318:	91 1d       	adc	r25, r1
 31a:	9d 01       	movw	r18, r26
 31c:	02 c0       	rjmp	.+4      	; 0x322 <__vector_1+0x98>
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	8a 95       	dec	r24
 324:	e2 f7       	brpl	.-8      	; 0x31e <__vector_1+0x94>
 326:	c9 01       	movw	r24, r18
 328:	20 81       	ld	r18, Z
 32a:	31 81       	ldd	r19, Z+1	; 0x01
 32c:	82 0f       	add	r24, r18
 32e:	93 1f       	adc	r25, r19
 330:	91 83       	std	Z+1, r25	; 0x01
 332:	80 83       	st	Z, r24
					_counter_++; 
 334:	80 91 7f 01 	lds	r24, 0x017F
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	80 93 7f 01 	sts	0x017F, r24
				
					if(_count_delay + _binary_counter_ >= 15){
 33e:	20 91 29 02 	lds	r18, 0x0229
 342:	80 91 71 01 	lds	r24, 0x0171
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	82 0f       	add	r24, r18
 34a:	91 1d       	adc	r25, r1
 34c:	0f 97       	sbiw	r24, 0x0f	; 15
 34e:	3c f0       	brlt	.+14     	; 0x35e <__vector_1+0xd4>
						_binary_array_counter_ ++;
 350:	80 91 80 01 	lds	r24, 0x0180
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	80 93 80 01 	sts	0x0180, r24
						_binary_counter_ = 0;
 35a:	10 92 71 01 	sts	0x0171, r1
		// only record the on states, if the signal is pulled low recored it!
		if (!CHECKBIT(IR_PIN_PORT, IRpin_PIN ) && _Delay_Time < 4000)
		{
			_count_delay=0;
			
			for ( ;_count_delay < _Delay_Time / delay; _count_delay++)
 35e:	80 91 29 02 	lds	r24, 0x0229
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	80 93 29 02 	sts	0x0229, r24
 368:	80 91 29 02 	lds	r24, 0x0229
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	84 17       	cp	r24, r20
 370:	95 07       	cpc	r25, r21
 372:	28 f2       	brcs	.-118    	; 0x2fe <__vector_1+0x74>
						_binary_array_counter_ ++;
						_binary_counter_ = 0;
					}
					
			}
			_binary_counter_ += (_Delay_Time / delay); 
 374:	80 91 71 01 	lds	r24, 0x0171
 378:	68 0f       	add	r22, r24
 37a:	60 93 71 01 	sts	0x0171, r22
 37e:	0a c0       	rjmp	.+20     	; 0x394 <__vector_1+0x10a>
		}
		
		else {
			_binary_counter_++; 
 380:	80 91 71 01 	lds	r24, 0x0171
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	80 93 71 01 	sts	0x0171, r24
			_counter_++;
 38a:	80 91 7f 01 	lds	r24, 0x017F
 38e:	8f 5f       	subi	r24, 0xFF	; 255
 390:	80 93 7f 01 	sts	0x017F, r24
		}
		
		
		if (_binary_counter_ >= 15){
 394:	80 91 71 01 	lds	r24, 0x0171
 398:	8f 30       	cpi	r24, 0x0F	; 15
 39a:	38 f0       	brcs	.+14     	; 0x3aa <__vector_1+0x120>
			_binary_array_counter_ ++; 
 39c:	80 91 80 01 	lds	r24, 0x0180
 3a0:	8f 5f       	subi	r24, 0xFF	; 255
 3a2:	80 93 80 01 	sts	0x0180, r24
			_binary_counter_ = 0;
 3a6:	10 92 71 01 	sts	0x0171, r1
		}
			
		if (_counter_ >= (_IR_Clock_Pulses) && _Delay_2_Trigger && _IR_Get_Pules != 1)
 3aa:	90 91 7f 01 	lds	r25, 0x017F
 3ae:	80 91 85 01 	lds	r24, 0x0185
 3b2:	98 17       	cp	r25, r24
 3b4:	98 f0       	brcs	.+38     	; 0x3dc <__vector_1+0x152>
 3b6:	80 91 6f 01 	lds	r24, 0x016F
 3ba:	90 91 70 01 	lds	r25, 0x0170
 3be:	89 2b       	or	r24, r25
 3c0:	69 f0       	breq	.+26     	; 0x3dc <__vector_1+0x152>
 3c2:	80 91 6e 01 	lds	r24, 0x016E
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	49 f0       	breq	.+18     	; 0x3dc <__vector_1+0x152>
		{
			_counter_ =0;
 3ca:	10 92 7f 01 	sts	0x017F, r1
			_Delay_2_Trigger = 0;
 3ce:	10 92 70 01 	sts	0x0170, r1
 3d2:	10 92 6f 01 	sts	0x016F, r1
			_IR_Read_State = 1; 
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 28 02 	sts	0x0228, r24
			
		}
		
		if (_IR_Get_Pules == 1 && _Delay_Time > 4000 ){
 3dc:	80 91 6e 01 	lds	r24, 0x016E
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	11 f5       	brne	.+68     	; 0x428 <__vector_1+0x19e>
 3e4:	80 91 7d 01 	lds	r24, 0x017D
 3e8:	90 91 7e 01 	lds	r25, 0x017E
 3ec:	81 3a       	cpi	r24, 0xA1	; 161
 3ee:	9f 40       	sbci	r25, 0x0F	; 15
 3f0:	d8 f0       	brcs	.+54     	; 0x428 <__vector_1+0x19e>
			_IR_Clock_Pulses = (_counter_  -1); 
 3f2:	80 91 7f 01 	lds	r24, 0x017F
 3f6:	81 50       	subi	r24, 0x01	; 1
 3f8:	80 93 85 01 	sts	0x0185, r24
			_Clock_Pulse_Trigger = 1; 
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 2e 02 	sts	0x022E, r25
 404:	80 93 2d 02 	sts	0x022D, r24
			_Delay_1_Trigger = 0;
 408:	10 92 2c 02 	sts	0x022C, r1
 40c:	10 92 2b 02 	sts	0x022B, r1
			_Delay_2_Trigger = 0;
 410:	10 92 70 01 	sts	0x0170, r1
 414:	10 92 6f 01 	sts	0x016F, r1
			_counter_ = 0;
 418:	10 92 7f 01 	sts	0x017F, r1
			_binary_counter_ = 0;
 41c:	10 92 71 01 	sts	0x0171, r1
			_binary_array_counter_ =0;
 420:	10 92 80 01 	sts	0x0180, r1
			_IR_Get_Pules= 0; 
 424:	10 92 6e 01 	sts	0x016E, r1
			
		}
	}
	
	// Store the clock pulses // get the clock pulse value
	if (_counter_ < 3  && _Delay_1_Trigger){
 428:	80 91 7f 01 	lds	r24, 0x017F
 42c:	83 30       	cpi	r24, 0x03	; 3
 42e:	08 f0       	brcs	.+2      	; 0x432 <__vector_1+0x1a8>
 430:	5e c0       	rjmp	.+188    	; 0x4ee <__vector_1+0x264>
 432:	80 91 2b 02 	lds	r24, 0x022B
 436:	90 91 2c 02 	lds	r25, 0x022C
 43a:	89 2b       	or	r24, r25
 43c:	09 f4       	brne	.+2      	; 0x440 <__vector_1+0x1b6>
 43e:	57 c0       	rjmp	.+174    	; 0x4ee <__vector_1+0x264>
		Pulse_Time[2+_counter_] = _Delay_Time;
 440:	e0 91 7f 01 	lds	r30, 0x017F
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	e9 58       	subi	r30, 0x89	; 137
 44c:	fe 4f       	sbci	r31, 0xFE	; 254
 44e:	80 91 7d 01 	lds	r24, 0x017D
 452:	90 91 7e 01 	lds	r25, 0x017E
 456:	91 83       	std	Z+1, r25	; 0x01
 458:	80 83       	st	Z, r24
		_counter_++;
 45a:	80 91 7f 01 	lds	r24, 0x017F
 45e:	8f 5f       	subi	r24, 0xFF	; 255
 460:	80 93 7f 01 	sts	0x017F, r24
		if (_counter_  == 3){
 464:	80 91 7f 01 	lds	r24, 0x017F
 468:	83 30       	cpi	r24, 0x03	; 3
 46a:	09 f0       	breq	.+2      	; 0x46e <__vector_1+0x1e4>
 46c:	40 c0       	rjmp	.+128    	; 0x4ee <__vector_1+0x264>
			_Delay_1_Trigger = 0;
 46e:	10 92 2c 02 	sts	0x022C, r1
 472:	10 92 2b 02 	sts	0x022B, r1
			_Delay_2_Trigger = 1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	90 93 70 01 	sts	0x0170, r25
 47e:	80 93 6f 01 	sts	0x016F, r24
			_binary_array_counter_ = 0; 
 482:	10 92 80 01 	sts	0x0180, r1
		
			
			_counter_ = 0;
 486:	10 92 7f 01 	sts	0x017F, r1
			delay =  ((Pulse_Time[2]+Pulse_Time[3]+Pulse_Time[4]) / 3 ) -15; 	
 48a:	20 91 77 01 	lds	r18, 0x0177
 48e:	30 91 78 01 	lds	r19, 0x0178
 492:	80 91 79 01 	lds	r24, 0x0179
 496:	90 91 7a 01 	lds	r25, 0x017A
 49a:	82 0f       	add	r24, r18
 49c:	93 1f       	adc	r25, r19
 49e:	20 91 7b 01 	lds	r18, 0x017B
 4a2:	30 91 7c 01 	lds	r19, 0x017C
 4a6:	82 0f       	add	r24, r18
 4a8:	93 1f       	adc	r25, r19
 4aa:	63 e0       	ldi	r22, 0x03	; 3
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__divmodhi4>
 4b2:	6f 50       	subi	r22, 0x0F	; 15
 4b4:	71 09       	sbc	r23, r1
 4b6:	70 93 87 01 	sts	0x0187, r23
 4ba:	60 93 86 01 	sts	0x0186, r22
			
			for(_counter_= 0; _counter_< 16; _counter_++)
 4be:	10 92 7f 01 	sts	0x017F, r1
 4c2:	80 91 7f 01 	lds	r24, 0x017F
 4c6:	80 31       	cpi	r24, 0x10	; 16
 4c8:	90 f4       	brcc	.+36     	; 0x4ee <__vector_1+0x264>
					_Store_Input_Signal[_counter_] = 0x0000;
 4ca:	e0 91 7f 01 	lds	r30, 0x017F
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	e1 5d       	subi	r30, 0xD1	; 209
 4d6:	fd 4f       	sbci	r31, 0xFD	; 253
 4d8:	11 82       	std	Z+1, r1	; 0x01
 4da:	10 82       	st	Z, r1
		
			
			_counter_ = 0;
			delay =  ((Pulse_Time[2]+Pulse_Time[3]+Pulse_Time[4]) / 3 ) -15; 	
			
			for(_counter_= 0; _counter_< 16; _counter_++)
 4dc:	80 91 7f 01 	lds	r24, 0x017F
 4e0:	8f 5f       	subi	r24, 0xFF	; 255
 4e2:	80 93 7f 01 	sts	0x017F, r24
 4e6:	80 91 7f 01 	lds	r24, 0x017F
 4ea:	80 31       	cpi	r24, 0x10	; 16
 4ec:	70 f3       	brcs	.-36     	; 0x4ca <__vector_1+0x240>
						
		}
	}

	// IR Start signal must be between 7ms & 19ms anything less & issues will be had 
	if (_Delay_Time > 200 && _Delay_Time < 3000 && CHECKBIT(IR_PIN_PORT, IRpin_PIN ) ){
 4ee:	80 91 7d 01 	lds	r24, 0x017D
 4f2:	90 91 7e 01 	lds	r25, 0x017E
 4f6:	9c 01       	movw	r18, r24
 4f8:	29 5c       	subi	r18, 0xC9	; 201
 4fa:	31 09       	sbc	r19, r1
 4fc:	2f 3e       	cpi	r18, 0xEF	; 239
 4fe:	3a 40       	sbci	r19, 0x0A	; 10
 500:	a0 f4       	brcc	.+40     	; 0x52a <__vector_1+0x2a0>
 502:	4a 9b       	sbis	0x09, 2	; 9
 504:	12 c0       	rjmp	.+36     	; 0x52a <__vector_1+0x2a0>
		_counter_ = 0; 
 506:	10 92 7f 01 	sts	0x017F, r1
		Pulse_Time[0] = _Delay_Time;		
 50a:	e3 e7       	ldi	r30, 0x73	; 115
 50c:	f1 e0       	ldi	r31, 0x01	; 1
 50e:	80 83       	st	Z, r24
 510:	91 83       	std	Z+1, r25	; 0x01
		_half_time = ( Pulse_Time[0]/2);
 512:	28 2f       	mov	r18, r24
 514:	39 2f       	mov	r19, r25
 516:	33 23       	and	r19, r19
 518:	14 f4       	brge	.+4      	; 0x51e <__vector_1+0x294>
 51a:	2f 5f       	subi	r18, 0xFF	; 255
 51c:	3f 4f       	sbci	r19, 0xFF	; 255
 51e:	35 95       	asr	r19
 520:	27 95       	ror	r18
 522:	30 93 83 01 	sts	0x0183, r19
 526:	20 93 82 01 	sts	0x0182, r18
	}
		
	// Triggered only if current delay time = half previous delay 
	if (_Delay_Time <= (_half_time +20)  && _Delay_Time >= (_half_time-20) &&  !CHECKBIT(IR_PIN_PORT, IRpin_PIN ) ){
 52a:	20 91 82 01 	lds	r18, 0x0182
 52e:	30 91 83 01 	lds	r19, 0x0183
 532:	a9 01       	movw	r20, r18
 534:	4c 5e       	subi	r20, 0xEC	; 236
 536:	5f 4f       	sbci	r21, 0xFF	; 255
 538:	48 17       	cp	r20, r24
 53a:	59 07       	cpc	r21, r25
 53c:	88 f0       	brcs	.+34     	; 0x560 <__vector_1+0x2d6>
 53e:	24 51       	subi	r18, 0x14	; 20
 540:	31 09       	sbc	r19, r1
 542:	82 17       	cp	r24, r18
 544:	93 07       	cpc	r25, r19
 546:	60 f0       	brcs	.+24     	; 0x560 <__vector_1+0x2d6>
 548:	4a 99       	sbic	0x09, 2	; 9
 54a:	0a c0       	rjmp	.+20     	; 0x560 <__vector_1+0x2d6>
		Pulse_Time[1] = _Delay_Time;
 54c:	90 93 76 01 	sts	0x0176, r25
 550:	80 93 75 01 	sts	0x0175, r24
		_Delay_1_Trigger = 1;
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	30 93 2c 02 	sts	0x022C, r19
 55c:	20 93 2b 02 	sts	0x022B, r18
	}
	
	
	// If delay is larger than 19 ms reset all values 
	if (_Delay_Time > 3200){
 560:	81 38       	cpi	r24, 0x81	; 129
 562:	9c 40       	sbci	r25, 0x0C	; 12
 564:	70 f0       	brcs	.+28     	; 0x582 <__vector_1+0x2f8>
		_Delay_1_Trigger = 0;
 566:	10 92 2c 02 	sts	0x022C, r1
 56a:	10 92 2b 02 	sts	0x022B, r1
		_Delay_2_Trigger = 0;
 56e:	10 92 70 01 	sts	0x0170, r1
 572:	10 92 6f 01 	sts	0x016F, r1
		_counter_ = 0; 
 576:	10 92 7f 01 	sts	0x017F, r1
		_binary_counter_ = 0;
 57a:	10 92 71 01 	sts	0x0171, r1
		_binary_array_counter_ =0; 			
 57e:	10 92 80 01 	sts	0x0180, r1
	}
	
	TCNT1 = 0;            //Reset the timer value every interrupt
 582:	10 92 85 00 	sts	0x0085, r1
 586:	10 92 84 00 	sts	0x0084, r1
}
 58a:	ff 91       	pop	r31
 58c:	ef 91       	pop	r30
 58e:	bf 91       	pop	r27
 590:	af 91       	pop	r26
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	7f 91       	pop	r23
 598:	6f 91       	pop	r22
 59a:	5f 91       	pop	r21
 59c:	4f 91       	pop	r20
 59e:	3f 91       	pop	r19
 5a0:	2f 91       	pop	r18
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <IR_Fun>:
//	printf("\n\r Clock pulses: %d ", _IR_Clock_Pulses);
	_Clock_Pulse_Trigger =0 ;
}


void IR_Fun(void){
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	c0 e0       	ldi	r28, 0x00	; 0
 5ba:	d0 e0       	ldi	r29, 0x00	; 0
// 	printf(" 0x%x  \n\r", _Store_Input_Signal[_count]);
// 
// 	
	for (char x = 0; x < 4; x++)
		if (IR_Compare(_Store_Input_Signal,  _IR_Remote_Buttons[x])){
			printf ("\n\n\n FOUND %d", x);
 5bc:	00 e6       	ldi	r16, 0x60	; 96
 5be:	11 e0       	ldi	r17, 0x01	; 1
// 	for(char _count=0; _count < (_IR_Clock_Pulses/16)+2; _count++)
// 	printf(" 0x%x  \n\r", _Store_Input_Signal[_count]);
// 
// 	
	for (char x = 0; x < 4; x++)
		if (IR_Compare(_Store_Input_Signal,  _IR_Remote_Buttons[x])){
 5c0:	6c 2f       	mov	r22, r28
 5c2:	7d 2f       	mov	r23, r29
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	cb 01       	movw	r24, r22
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	68 0f       	add	r22, r24
 5d8:	79 1f       	adc	r23, r25
 5da:	6a 5f       	subi	r22, 0xFA	; 250
 5dc:	7e 4f       	sbci	r23, 0xFE	; 254
 5de:	8f e2       	ldi	r24, 0x2F	; 47
 5e0:	92 e0       	ldi	r25, 0x02	; 2
 5e2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <IR_Compare>
 5e6:	88 23       	and	r24, r24
 5e8:	b9 f0       	breq	.+46     	; 0x618 <IR_Fun+0x6c>
			printf ("\n\n\n FOUND %d", x);
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	1f 93       	push	r17
 5f0:	0f 93       	push	r16
 5f2:	0e 94 b3 03 	call	0x766	; 0x766 <printf>
//	printf("\n\r Clock pulses: %d ", _IR_Clock_Pulses);
	_Clock_Pulse_Trigger =0 ;
}


void IR_Fun(void){
 5f6:	fe 01       	movw	r30, r28
 5f8:	e2 5b       	subi	r30, 0xB2	; 178
 5fa:	fe 4f       	sbci	r31, 0xFE	; 254
// 	
	for (char x = 0; x < 4; x++)
		if (IR_Compare(_Store_Input_Signal,  _IR_Remote_Buttons[x])){
			printf ("\n\n\n FOUND %d", x);
			
			_74HC164_SendData(_8_Segment_Active_Low[x]);
 5fc:	80 81       	ld	r24, Z
 5fe:	0e 94 1a 03 	call	0x634	; 0x634 <_74HC164_SendData>

			
			if (x >= 2){
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	c2 30       	cpi	r28, 0x02	; 2
 60c:	18 f0       	brcs	.+6      	; 0x614 <IR_Fun+0x68>
				CLEARBIT(_Relay__PORT, _Relay_1_Pin);
 60e:	28 98       	cbi	0x05, 0	; 5
				CLEARBIT(_Relay__PORT, _Relay_2_Pin);
 610:	29 98       	cbi	0x05, 1	; 5
 612:	02 c0       	rjmp	.+4      	; 0x618 <IR_Fun+0x6c>
			}
			else{
				SETBIT(_Relay__PORT, _Relay_1_Pin);
 614:	28 9a       	sbi	0x05, 0	; 5
				SETBIT(_Relay__PORT, _Relay_2_Pin);
 616:	29 9a       	sbi	0x05, 1	; 5
 618:	21 96       	adiw	r28, 0x01	; 1
// 	
// 	for(char _count=0; _count < (_IR_Clock_Pulses/16)+2; _count++)
// 	printf(" 0x%x  \n\r", _Store_Input_Signal[_count]);
// 
// 	
	for (char x = 0; x < 4; x++)
 61a:	c4 30       	cpi	r28, 0x04	; 4
 61c:	d1 05       	cpc	r29, r1
 61e:	81 f6       	brne	.-96     	; 0x5c0 <IR_Fun+0x14>
				SETBIT(_Relay__PORT, _Relay_2_Pin);
			}
		}
	
	return;
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	ff 90       	pop	r15
 62a:	ef 90       	pop	r14
 62c:	08 95       	ret

0000062e <_74HC164_Initialize>:
0x00, //8 
0x10  //9
	};

void _74HC164_Initialize(void){
	_74HC164_DDR = (1 << _74HC164_Data) |(1 << _74HC164_Clock) | (1 << _74HC164_CS);
 62e:	87 e0       	ldi	r24, 0x07	; 7
 630:	87 b9       	out	0x07, r24	; 7
 632:	08 95       	ret

00000634 <_74HC164_SendData>:
}

void _74HC164_SendData(char data){
	char datalength = 0; 
	_74HC164_CS_Low();
 634:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 636:	ef e3       	ldi	r30, 0x3F	; 63
 638:	fc e9       	ldi	r31, 0x9C	; 156
 63a:	31 97       	sbiw	r30, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <_74HC164_SendData+0x6>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <_74HC164_SendData+0xc>
 640:	00 00       	nop
	_delay_ms(10); 
	_74HC164_CS_High(); 
 642:	41 9a       	sbi	0x08, 1	; 8
 644:	98 e0       	ldi	r25, 0x08	; 8
	
	
	for (datalength = 0; datalength < 8 ; datalength++){
		if (data & 0x80)
 646:	88 23       	and	r24, r24
 648:	14 f4       	brge	.+4      	; 0x64e <_74HC164_SendData+0x1a>
		{
			_74HC164_Data_High();
 64a:	42 9a       	sbi	0x08, 2	; 8
 64c:	01 c0       	rjmp	.+2      	; 0x650 <_74HC164_SendData+0x1c>
		}
		else
		{
			_74HC164_Data_Low();
 64e:	42 98       	cbi	0x08, 2	; 8
 650:	ef e9       	ldi	r30, 0x9F	; 159
 652:	ff e0       	ldi	r31, 0x0F	; 15
 654:	31 97       	sbiw	r30, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <_74HC164_SendData+0x20>
 658:	00 c0       	rjmp	.+0      	; 0x65a <_74HC164_SendData+0x26>
 65a:	00 00       	nop
		}
		_delay_ms(1);
		_74HC164_Clock_Low();
 65c:	40 98       	cbi	0x08, 0	; 8
 65e:	ef e9       	ldi	r30, 0x9F	; 159
 660:	ff e0       	ldi	r31, 0x0F	; 15
 662:	31 97       	sbiw	r30, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <_74HC164_SendData+0x2e>
 666:	00 c0       	rjmp	.+0      	; 0x668 <_74HC164_SendData+0x34>
 668:	00 00       	nop
		_delay_ms(1);
		_74HC164_Clock_High();
 66a:	40 9a       	sbi	0x08, 0	; 8
			
		data <<= 1;
 66c:	88 0f       	add	r24, r24
 66e:	91 50       	subi	r25, 0x01	; 1
	_74HC164_CS_Low();
	_delay_ms(10); 
	_74HC164_CS_High(); 
	
	
	for (datalength = 0; datalength < 8 ; datalength++){
 670:	51 f7       	brne	.-44     	; 0x646 <_74HC164_SendData+0x12>
 672:	8f e9       	ldi	r24, 0x9F	; 159
 674:	9f e0       	ldi	r25, 0x0F	; 15
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <_74HC164_SendData+0x42>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <_74HC164_SendData+0x48>
 67c:	00 00       	nop
 67e:	08 95       	ret

00000680 <__udivmodhi4>:
 680:	aa 1b       	sub	r26, r26
 682:	bb 1b       	sub	r27, r27
 684:	51 e1       	ldi	r21, 0x11	; 17
 686:	07 c0       	rjmp	.+14     	; 0x696 <__udivmodhi4_ep>

00000688 <__udivmodhi4_loop>:
 688:	aa 1f       	adc	r26, r26
 68a:	bb 1f       	adc	r27, r27
 68c:	a6 17       	cp	r26, r22
 68e:	b7 07       	cpc	r27, r23
 690:	10 f0       	brcs	.+4      	; 0x696 <__udivmodhi4_ep>
 692:	a6 1b       	sub	r26, r22
 694:	b7 0b       	sbc	r27, r23

00000696 <__udivmodhi4_ep>:
 696:	88 1f       	adc	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	5a 95       	dec	r21
 69c:	a9 f7       	brne	.-22     	; 0x688 <__udivmodhi4_loop>
 69e:	80 95       	com	r24
 6a0:	90 95       	com	r25
 6a2:	bc 01       	movw	r22, r24
 6a4:	cd 01       	movw	r24, r26
 6a6:	08 95       	ret

000006a8 <__divmodhi4>:
 6a8:	97 fb       	bst	r25, 7
 6aa:	07 2e       	mov	r0, r23
 6ac:	16 f4       	brtc	.+4      	; 0x6b2 <__divmodhi4+0xa>
 6ae:	00 94       	com	r0
 6b0:	07 d0       	rcall	.+14     	; 0x6c0 <__divmodhi4_neg1>
 6b2:	77 fd       	sbrc	r23, 7
 6b4:	09 d0       	rcall	.+18     	; 0x6c8 <__divmodhi4_neg2>
 6b6:	0e 94 40 03 	call	0x680	; 0x680 <__udivmodhi4>
 6ba:	07 fc       	sbrc	r0, 7
 6bc:	05 d0       	rcall	.+10     	; 0x6c8 <__divmodhi4_neg2>
 6be:	3e f4       	brtc	.+14     	; 0x6ce <__divmodhi4_exit>

000006c0 <__divmodhi4_neg1>:
 6c0:	90 95       	com	r25
 6c2:	81 95       	neg	r24
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	08 95       	ret

000006c8 <__divmodhi4_neg2>:
 6c8:	70 95       	com	r23
 6ca:	61 95       	neg	r22
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255

000006ce <__divmodhi4_exit>:
 6ce:	08 95       	ret

000006d0 <fdevopen>:
 6d0:	0f 93       	push	r16
 6d2:	1f 93       	push	r17
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	ec 01       	movw	r28, r24
 6da:	8b 01       	movw	r16, r22
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	31 f4       	brne	.+12     	; 0x6ec <fdevopen+0x1c>
 6e0:	61 15       	cp	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	19 f4       	brne	.+6      	; 0x6ec <fdevopen+0x1c>
 6e6:	e0 e0       	ldi	r30, 0x00	; 0
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	37 c0       	rjmp	.+110    	; 0x75a <fdevopen+0x8a>
 6ec:	6e e0       	ldi	r22, 0x0E	; 14
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <calloc>
 6f8:	fc 01       	movw	r30, r24
 6fa:	00 97       	sbiw	r24, 0x00	; 0
 6fc:	a1 f3       	breq	.-24     	; 0x6e6 <fdevopen+0x16>
 6fe:	80 e8       	ldi	r24, 0x80	; 128
 700:	83 83       	std	Z+3, r24	; 0x03
 702:	01 15       	cp	r16, r1
 704:	11 05       	cpc	r17, r1
 706:	71 f0       	breq	.+28     	; 0x724 <fdevopen+0x54>
 708:	13 87       	std	Z+11, r17	; 0x0b
 70a:	02 87       	std	Z+10, r16	; 0x0a
 70c:	81 e8       	ldi	r24, 0x81	; 129
 70e:	83 83       	std	Z+3, r24	; 0x03
 710:	80 91 6f 02 	lds	r24, 0x026F
 714:	90 91 70 02 	lds	r25, 0x0270
 718:	89 2b       	or	r24, r25
 71a:	21 f4       	brne	.+8      	; 0x724 <fdevopen+0x54>
 71c:	f0 93 70 02 	sts	0x0270, r31
 720:	e0 93 6f 02 	sts	0x026F, r30
 724:	20 97       	sbiw	r28, 0x00	; 0
 726:	c9 f0       	breq	.+50     	; 0x75a <fdevopen+0x8a>
 728:	d1 87       	std	Z+9, r29	; 0x09
 72a:	c0 87       	std	Z+8, r28	; 0x08
 72c:	83 81       	ldd	r24, Z+3	; 0x03
 72e:	82 60       	ori	r24, 0x02	; 2
 730:	83 83       	std	Z+3, r24	; 0x03
 732:	80 91 71 02 	lds	r24, 0x0271
 736:	90 91 72 02 	lds	r25, 0x0272
 73a:	89 2b       	or	r24, r25
 73c:	71 f4       	brne	.+28     	; 0x75a <fdevopen+0x8a>
 73e:	f0 93 72 02 	sts	0x0272, r31
 742:	e0 93 71 02 	sts	0x0271, r30
 746:	80 91 73 02 	lds	r24, 0x0273
 74a:	90 91 74 02 	lds	r25, 0x0274
 74e:	89 2b       	or	r24, r25
 750:	21 f4       	brne	.+8      	; 0x75a <fdevopen+0x8a>
 752:	f0 93 74 02 	sts	0x0274, r31
 756:	e0 93 73 02 	sts	0x0273, r30
 75a:	cf 01       	movw	r24, r30
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	1f 91       	pop	r17
 762:	0f 91       	pop	r16
 764:	08 95       	ret

00000766 <printf>:
 766:	a0 e0       	ldi	r26, 0x00	; 0
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	e9 eb       	ldi	r30, 0xB9	; 185
 76c:	f3 e0       	ldi	r31, 0x03	; 3
 76e:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__prologue_saves__+0x20>
 772:	fe 01       	movw	r30, r28
 774:	35 96       	adiw	r30, 0x05	; 5
 776:	61 91       	ld	r22, Z+
 778:	71 91       	ld	r23, Z+
 77a:	af 01       	movw	r20, r30
 77c:	80 91 71 02 	lds	r24, 0x0271
 780:	90 91 72 02 	lds	r25, 0x0272
 784:	0e 94 c7 03 	call	0x78e	; 0x78e <vfprintf>
 788:	e2 e0       	ldi	r30, 0x02	; 2
 78a:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__epilogue_restores__+0x20>

0000078e <vfprintf>:
 78e:	ac e0       	ldi	r26, 0x0C	; 12
 790:	b0 e0       	ldi	r27, 0x00	; 0
 792:	ed ec       	ldi	r30, 0xCD	; 205
 794:	f3 e0       	ldi	r31, 0x03	; 3
 796:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__prologue_saves__>
 79a:	7c 01       	movw	r14, r24
 79c:	6b 01       	movw	r12, r22
 79e:	8a 01       	movw	r16, r20
 7a0:	fc 01       	movw	r30, r24
 7a2:	17 82       	std	Z+7, r1	; 0x07
 7a4:	16 82       	std	Z+6, r1	; 0x06
 7a6:	83 81       	ldd	r24, Z+3	; 0x03
 7a8:	81 ff       	sbrs	r24, 1
 7aa:	c6 c1       	rjmp	.+908    	; 0xb38 <__stack+0x239>
 7ac:	88 24       	eor	r8, r8
 7ae:	83 94       	inc	r8
 7b0:	91 2c       	mov	r9, r1
 7b2:	8c 0e       	add	r8, r28
 7b4:	9d 1e       	adc	r9, r29
 7b6:	f7 01       	movw	r30, r14
 7b8:	93 81       	ldd	r25, Z+3	; 0x03
 7ba:	f6 01       	movw	r30, r12
 7bc:	93 fd       	sbrc	r25, 3
 7be:	85 91       	lpm	r24, Z+
 7c0:	93 ff       	sbrs	r25, 3
 7c2:	81 91       	ld	r24, Z+
 7c4:	6f 01       	movw	r12, r30
 7c6:	88 23       	and	r24, r24
 7c8:	09 f4       	brne	.+2      	; 0x7cc <vfprintf+0x3e>
 7ca:	b2 c1       	rjmp	.+868    	; 0xb30 <__stack+0x231>
 7cc:	85 32       	cpi	r24, 0x25	; 37
 7ce:	39 f4       	brne	.+14     	; 0x7de <vfprintf+0x50>
 7d0:	93 fd       	sbrc	r25, 3
 7d2:	85 91       	lpm	r24, Z+
 7d4:	93 ff       	sbrs	r25, 3
 7d6:	81 91       	ld	r24, Z+
 7d8:	6f 01       	movw	r12, r30
 7da:	85 32       	cpi	r24, 0x25	; 37
 7dc:	29 f4       	brne	.+10     	; 0x7e8 <vfprintf+0x5a>
 7de:	b7 01       	movw	r22, r14
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <vfprintf+0x28>
 7e8:	51 2c       	mov	r5, r1
 7ea:	31 2c       	mov	r3, r1
 7ec:	20 e0       	ldi	r18, 0x00	; 0
 7ee:	20 32       	cpi	r18, 0x20	; 32
 7f0:	a8 f4       	brcc	.+42     	; 0x81c <vfprintf+0x8e>
 7f2:	8b 32       	cpi	r24, 0x2B	; 43
 7f4:	61 f0       	breq	.+24     	; 0x80e <vfprintf+0x80>
 7f6:	28 f4       	brcc	.+10     	; 0x802 <vfprintf+0x74>
 7f8:	80 32       	cpi	r24, 0x20	; 32
 7fa:	51 f0       	breq	.+20     	; 0x810 <vfprintf+0x82>
 7fc:	83 32       	cpi	r24, 0x23	; 35
 7fe:	71 f4       	brne	.+28     	; 0x81c <vfprintf+0x8e>
 800:	0b c0       	rjmp	.+22     	; 0x818 <vfprintf+0x8a>
 802:	8d 32       	cpi	r24, 0x2D	; 45
 804:	39 f0       	breq	.+14     	; 0x814 <vfprintf+0x86>
 806:	80 33       	cpi	r24, 0x30	; 48
 808:	49 f4       	brne	.+18     	; 0x81c <vfprintf+0x8e>
 80a:	21 60       	ori	r18, 0x01	; 1
 80c:	28 c0       	rjmp	.+80     	; 0x85e <vfprintf+0xd0>
 80e:	22 60       	ori	r18, 0x02	; 2
 810:	24 60       	ori	r18, 0x04	; 4
 812:	25 c0       	rjmp	.+74     	; 0x85e <vfprintf+0xd0>
 814:	28 60       	ori	r18, 0x08	; 8
 816:	23 c0       	rjmp	.+70     	; 0x85e <vfprintf+0xd0>
 818:	20 61       	ori	r18, 0x10	; 16
 81a:	21 c0       	rjmp	.+66     	; 0x85e <vfprintf+0xd0>
 81c:	27 fd       	sbrc	r18, 7
 81e:	27 c0       	rjmp	.+78     	; 0x86e <vfprintf+0xe0>
 820:	38 2f       	mov	r19, r24
 822:	30 53       	subi	r19, 0x30	; 48
 824:	3a 30       	cpi	r19, 0x0A	; 10
 826:	78 f4       	brcc	.+30     	; 0x846 <vfprintf+0xb8>
 828:	26 ff       	sbrs	r18, 6
 82a:	06 c0       	rjmp	.+12     	; 0x838 <vfprintf+0xaa>
 82c:	fa e0       	ldi	r31, 0x0A	; 10
 82e:	5f 9e       	mul	r5, r31
 830:	30 0d       	add	r19, r0
 832:	11 24       	eor	r1, r1
 834:	53 2e       	mov	r5, r19
 836:	13 c0       	rjmp	.+38     	; 0x85e <vfprintf+0xd0>
 838:	8a e0       	ldi	r24, 0x0A	; 10
 83a:	38 9e       	mul	r3, r24
 83c:	30 0d       	add	r19, r0
 83e:	11 24       	eor	r1, r1
 840:	33 2e       	mov	r3, r19
 842:	20 62       	ori	r18, 0x20	; 32
 844:	0c c0       	rjmp	.+24     	; 0x85e <vfprintf+0xd0>
 846:	8e 32       	cpi	r24, 0x2E	; 46
 848:	21 f4       	brne	.+8      	; 0x852 <vfprintf+0xc4>
 84a:	26 fd       	sbrc	r18, 6
 84c:	71 c1       	rjmp	.+738    	; 0xb30 <__stack+0x231>
 84e:	20 64       	ori	r18, 0x40	; 64
 850:	06 c0       	rjmp	.+12     	; 0x85e <vfprintf+0xd0>
 852:	8c 36       	cpi	r24, 0x6C	; 108
 854:	11 f4       	brne	.+4      	; 0x85a <vfprintf+0xcc>
 856:	20 68       	ori	r18, 0x80	; 128
 858:	02 c0       	rjmp	.+4      	; 0x85e <vfprintf+0xd0>
 85a:	88 36       	cpi	r24, 0x68	; 104
 85c:	41 f4       	brne	.+16     	; 0x86e <vfprintf+0xe0>
 85e:	f6 01       	movw	r30, r12
 860:	93 fd       	sbrc	r25, 3
 862:	85 91       	lpm	r24, Z+
 864:	93 ff       	sbrs	r25, 3
 866:	81 91       	ld	r24, Z+
 868:	6f 01       	movw	r12, r30
 86a:	81 11       	cpse	r24, r1
 86c:	c0 cf       	rjmp	.-128    	; 0x7ee <vfprintf+0x60>
 86e:	98 2f       	mov	r25, r24
 870:	95 54       	subi	r25, 0x45	; 69
 872:	93 30       	cpi	r25, 0x03	; 3
 874:	18 f0       	brcs	.+6      	; 0x87c <vfprintf+0xee>
 876:	90 52       	subi	r25, 0x20	; 32
 878:	93 30       	cpi	r25, 0x03	; 3
 87a:	28 f4       	brcc	.+10     	; 0x886 <vfprintf+0xf8>
 87c:	0c 5f       	subi	r16, 0xFC	; 252
 87e:	1f 4f       	sbci	r17, 0xFF	; 255
 880:	ff e3       	ldi	r31, 0x3F	; 63
 882:	f9 83       	std	Y+1, r31	; 0x01
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <vfprintf+0x112>
 886:	83 36       	cpi	r24, 0x63	; 99
 888:	31 f0       	breq	.+12     	; 0x896 <vfprintf+0x108>
 88a:	83 37       	cpi	r24, 0x73	; 115
 88c:	71 f0       	breq	.+28     	; 0x8aa <vfprintf+0x11c>
 88e:	83 35       	cpi	r24, 0x53	; 83
 890:	09 f0       	breq	.+2      	; 0x894 <vfprintf+0x106>
 892:	5e c0       	rjmp	.+188    	; 0x950 <__stack+0x51>
 894:	23 c0       	rjmp	.+70     	; 0x8dc <vfprintf+0x14e>
 896:	f8 01       	movw	r30, r16
 898:	80 81       	ld	r24, Z
 89a:	89 83       	std	Y+1, r24	; 0x01
 89c:	0e 5f       	subi	r16, 0xFE	; 254
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	44 24       	eor	r4, r4
 8a2:	43 94       	inc	r4
 8a4:	51 2c       	mov	r5, r1
 8a6:	54 01       	movw	r10, r8
 8a8:	15 c0       	rjmp	.+42     	; 0x8d4 <vfprintf+0x146>
 8aa:	38 01       	movw	r6, r16
 8ac:	f2 e0       	ldi	r31, 0x02	; 2
 8ae:	6f 0e       	add	r6, r31
 8b0:	71 1c       	adc	r7, r1
 8b2:	f8 01       	movw	r30, r16
 8b4:	a0 80       	ld	r10, Z
 8b6:	b1 80       	ldd	r11, Z+1	; 0x01
 8b8:	26 ff       	sbrs	r18, 6
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <vfprintf+0x134>
 8bc:	65 2d       	mov	r22, r5
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <vfprintf+0x138>
 8c2:	6f ef       	ldi	r22, 0xFF	; 255
 8c4:	7f ef       	ldi	r23, 0xFF	; 255
 8c6:	c5 01       	movw	r24, r10
 8c8:	2c 87       	std	Y+12, r18	; 0x0c
 8ca:	0e 94 0b 07 	call	0xe16	; 0xe16 <strnlen>
 8ce:	2c 01       	movw	r4, r24
 8d0:	83 01       	movw	r16, r6
 8d2:	2c 85       	ldd	r18, Y+12	; 0x0c
 8d4:	6f e7       	ldi	r22, 0x7F	; 127
 8d6:	26 2e       	mov	r2, r22
 8d8:	22 22       	and	r2, r18
 8da:	18 c0       	rjmp	.+48     	; 0x90c <__stack+0xd>
 8dc:	38 01       	movw	r6, r16
 8de:	f2 e0       	ldi	r31, 0x02	; 2
 8e0:	6f 0e       	add	r6, r31
 8e2:	71 1c       	adc	r7, r1
 8e4:	f8 01       	movw	r30, r16
 8e6:	a0 80       	ld	r10, Z
 8e8:	b1 80       	ldd	r11, Z+1	; 0x01
 8ea:	26 ff       	sbrs	r18, 6
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <vfprintf+0x166>
 8ee:	65 2d       	mov	r22, r5
 8f0:	70 e0       	ldi	r23, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <vfprintf+0x16a>
 8f4:	6f ef       	ldi	r22, 0xFF	; 255
 8f6:	7f ef       	ldi	r23, 0xFF	; 255
 8f8:	c5 01       	movw	r24, r10
 8fa:	2c 87       	std	Y+12, r18	; 0x0c
 8fc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <strnlen_P>
 900:	2c 01       	movw	r4, r24
 902:	2c 85       	ldd	r18, Y+12	; 0x0c
 904:	50 e8       	ldi	r21, 0x80	; 128
 906:	25 2e       	mov	r2, r21
 908:	22 2a       	or	r2, r18
 90a:	83 01       	movw	r16, r6
 90c:	23 fc       	sbrc	r2, 3
 90e:	1c c0       	rjmp	.+56     	; 0x948 <__stack+0x49>
 910:	06 c0       	rjmp	.+12     	; 0x91e <__stack+0x1f>
 912:	b7 01       	movw	r22, r14
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 91c:	3a 94       	dec	r3
 91e:	83 2d       	mov	r24, r3
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	48 16       	cp	r4, r24
 924:	59 06       	cpc	r5, r25
 926:	a8 f3       	brcs	.-22     	; 0x912 <__stack+0x13>
 928:	0f c0       	rjmp	.+30     	; 0x948 <__stack+0x49>
 92a:	f5 01       	movw	r30, r10
 92c:	27 fc       	sbrc	r2, 7
 92e:	85 91       	lpm	r24, Z+
 930:	27 fe       	sbrs	r2, 7
 932:	81 91       	ld	r24, Z+
 934:	5f 01       	movw	r10, r30
 936:	b7 01       	movw	r22, r14
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 93e:	31 10       	cpse	r3, r1
 940:	3a 94       	dec	r3
 942:	f1 e0       	ldi	r31, 0x01	; 1
 944:	4f 1a       	sub	r4, r31
 946:	51 08       	sbc	r5, r1
 948:	41 14       	cp	r4, r1
 94a:	51 04       	cpc	r5, r1
 94c:	71 f7       	brne	.-36     	; 0x92a <__stack+0x2b>
 94e:	ed c0       	rjmp	.+474    	; 0xb2a <__stack+0x22b>
 950:	84 36       	cpi	r24, 0x64	; 100
 952:	11 f0       	breq	.+4      	; 0x958 <__stack+0x59>
 954:	89 36       	cpi	r24, 0x69	; 105
 956:	41 f5       	brne	.+80     	; 0x9a8 <__stack+0xa9>
 958:	f8 01       	movw	r30, r16
 95a:	27 ff       	sbrs	r18, 7
 95c:	07 c0       	rjmp	.+14     	; 0x96c <__stack+0x6d>
 95e:	60 81       	ld	r22, Z
 960:	71 81       	ldd	r23, Z+1	; 0x01
 962:	82 81       	ldd	r24, Z+2	; 0x02
 964:	93 81       	ldd	r25, Z+3	; 0x03
 966:	0c 5f       	subi	r16, 0xFC	; 252
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	08 c0       	rjmp	.+16     	; 0x97c <__stack+0x7d>
 96c:	60 81       	ld	r22, Z
 96e:	71 81       	ldd	r23, Z+1	; 0x01
 970:	88 27       	eor	r24, r24
 972:	77 fd       	sbrc	r23, 7
 974:	80 95       	com	r24
 976:	98 2f       	mov	r25, r24
 978:	0e 5f       	subi	r16, 0xFE	; 254
 97a:	1f 4f       	sbci	r17, 0xFF	; 255
 97c:	4f e6       	ldi	r20, 0x6F	; 111
 97e:	b4 2e       	mov	r11, r20
 980:	b2 22       	and	r11, r18
 982:	97 ff       	sbrs	r25, 7
 984:	09 c0       	rjmp	.+18     	; 0x998 <__stack+0x99>
 986:	90 95       	com	r25
 988:	80 95       	com	r24
 98a:	70 95       	com	r23
 98c:	61 95       	neg	r22
 98e:	7f 4f       	sbci	r23, 0xFF	; 255
 990:	8f 4f       	sbci	r24, 0xFF	; 255
 992:	9f 4f       	sbci	r25, 0xFF	; 255
 994:	f0 e8       	ldi	r31, 0x80	; 128
 996:	bf 2a       	or	r11, r31
 998:	2a e0       	ldi	r18, 0x0A	; 10
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	a4 01       	movw	r20, r8
 99e:	0e 94 42 07 	call	0xe84	; 0xe84 <__ultoa_invert>
 9a2:	a8 2e       	mov	r10, r24
 9a4:	a8 18       	sub	r10, r8
 9a6:	43 c0       	rjmp	.+134    	; 0xa2e <__stack+0x12f>
 9a8:	85 37       	cpi	r24, 0x75	; 117
 9aa:	31 f4       	brne	.+12     	; 0x9b8 <__stack+0xb9>
 9ac:	3f ee       	ldi	r19, 0xEF	; 239
 9ae:	b3 2e       	mov	r11, r19
 9b0:	b2 22       	and	r11, r18
 9b2:	2a e0       	ldi	r18, 0x0A	; 10
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	24 c0       	rjmp	.+72     	; 0xa00 <__stack+0x101>
 9b8:	99 ef       	ldi	r25, 0xF9	; 249
 9ba:	b9 2e       	mov	r11, r25
 9bc:	b2 22       	and	r11, r18
 9be:	8f 36       	cpi	r24, 0x6F	; 111
 9c0:	b9 f0       	breq	.+46     	; 0x9f0 <__stack+0xf1>
 9c2:	20 f4       	brcc	.+8      	; 0x9cc <__stack+0xcd>
 9c4:	88 35       	cpi	r24, 0x58	; 88
 9c6:	09 f0       	breq	.+2      	; 0x9ca <__stack+0xcb>
 9c8:	b3 c0       	rjmp	.+358    	; 0xb30 <__stack+0x231>
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__stack+0xe7>
 9cc:	80 37       	cpi	r24, 0x70	; 112
 9ce:	21 f0       	breq	.+8      	; 0x9d8 <__stack+0xd9>
 9d0:	88 37       	cpi	r24, 0x78	; 120
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__stack+0xd7>
 9d4:	ad c0       	rjmp	.+346    	; 0xb30 <__stack+0x231>
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <__stack+0xdd>
 9d8:	20 e1       	ldi	r18, 0x10	; 16
 9da:	b2 2a       	or	r11, r18
 9dc:	b4 fe       	sbrs	r11, 4
 9de:	0b c0       	rjmp	.+22     	; 0x9f6 <__stack+0xf7>
 9e0:	84 e0       	ldi	r24, 0x04	; 4
 9e2:	b8 2a       	or	r11, r24
 9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <__stack+0xf7>
 9e6:	24 ff       	sbrs	r18, 4
 9e8:	09 c0       	rjmp	.+18     	; 0x9fc <__stack+0xfd>
 9ea:	e6 e0       	ldi	r30, 0x06	; 6
 9ec:	be 2a       	or	r11, r30
 9ee:	06 c0       	rjmp	.+12     	; 0x9fc <__stack+0xfd>
 9f0:	28 e0       	ldi	r18, 0x08	; 8
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	05 c0       	rjmp	.+10     	; 0xa00 <__stack+0x101>
 9f6:	20 e1       	ldi	r18, 0x10	; 16
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__stack+0x101>
 9fc:	20 e1       	ldi	r18, 0x10	; 16
 9fe:	32 e0       	ldi	r19, 0x02	; 2
 a00:	f8 01       	movw	r30, r16
 a02:	b7 fe       	sbrs	r11, 7
 a04:	07 c0       	rjmp	.+14     	; 0xa14 <__stack+0x115>
 a06:	60 81       	ld	r22, Z
 a08:	71 81       	ldd	r23, Z+1	; 0x01
 a0a:	82 81       	ldd	r24, Z+2	; 0x02
 a0c:	93 81       	ldd	r25, Z+3	; 0x03
 a0e:	0c 5f       	subi	r16, 0xFC	; 252
 a10:	1f 4f       	sbci	r17, 0xFF	; 255
 a12:	06 c0       	rjmp	.+12     	; 0xa20 <__stack+0x121>
 a14:	60 81       	ld	r22, Z
 a16:	71 81       	ldd	r23, Z+1	; 0x01
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 5f       	subi	r16, 0xFE	; 254
 a1e:	1f 4f       	sbci	r17, 0xFF	; 255
 a20:	a4 01       	movw	r20, r8
 a22:	0e 94 42 07 	call	0xe84	; 0xe84 <__ultoa_invert>
 a26:	a8 2e       	mov	r10, r24
 a28:	a8 18       	sub	r10, r8
 a2a:	ff e7       	ldi	r31, 0x7F	; 127
 a2c:	bf 22       	and	r11, r31
 a2e:	b6 fe       	sbrs	r11, 6
 a30:	0b c0       	rjmp	.+22     	; 0xa48 <__stack+0x149>
 a32:	2b 2d       	mov	r18, r11
 a34:	2e 7f       	andi	r18, 0xFE	; 254
 a36:	a5 14       	cp	r10, r5
 a38:	50 f4       	brcc	.+20     	; 0xa4e <__stack+0x14f>
 a3a:	b4 fe       	sbrs	r11, 4
 a3c:	0a c0       	rjmp	.+20     	; 0xa52 <__stack+0x153>
 a3e:	b2 fc       	sbrc	r11, 2
 a40:	08 c0       	rjmp	.+16     	; 0xa52 <__stack+0x153>
 a42:	2b 2d       	mov	r18, r11
 a44:	2e 7e       	andi	r18, 0xEE	; 238
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <__stack+0x153>
 a48:	7a 2c       	mov	r7, r10
 a4a:	2b 2d       	mov	r18, r11
 a4c:	03 c0       	rjmp	.+6      	; 0xa54 <__stack+0x155>
 a4e:	7a 2c       	mov	r7, r10
 a50:	01 c0       	rjmp	.+2      	; 0xa54 <__stack+0x155>
 a52:	75 2c       	mov	r7, r5
 a54:	24 ff       	sbrs	r18, 4
 a56:	0d c0       	rjmp	.+26     	; 0xa72 <__stack+0x173>
 a58:	fe 01       	movw	r30, r28
 a5a:	ea 0d       	add	r30, r10
 a5c:	f1 1d       	adc	r31, r1
 a5e:	80 81       	ld	r24, Z
 a60:	80 33       	cpi	r24, 0x30	; 48
 a62:	11 f4       	brne	.+4      	; 0xa68 <__stack+0x169>
 a64:	29 7e       	andi	r18, 0xE9	; 233
 a66:	09 c0       	rjmp	.+18     	; 0xa7a <__stack+0x17b>
 a68:	22 ff       	sbrs	r18, 2
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <__stack+0x179>
 a6c:	73 94       	inc	r7
 a6e:	73 94       	inc	r7
 a70:	04 c0       	rjmp	.+8      	; 0xa7a <__stack+0x17b>
 a72:	82 2f       	mov	r24, r18
 a74:	86 78       	andi	r24, 0x86	; 134
 a76:	09 f0       	breq	.+2      	; 0xa7a <__stack+0x17b>
 a78:	73 94       	inc	r7
 a7a:	23 fd       	sbrc	r18, 3
 a7c:	14 c0       	rjmp	.+40     	; 0xaa6 <__stack+0x1a7>
 a7e:	20 ff       	sbrs	r18, 0
 a80:	0f c0       	rjmp	.+30     	; 0xaa0 <__stack+0x1a1>
 a82:	5a 2c       	mov	r5, r10
 a84:	73 14       	cp	r7, r3
 a86:	60 f4       	brcc	.+24     	; 0xaa0 <__stack+0x1a1>
 a88:	53 0c       	add	r5, r3
 a8a:	57 18       	sub	r5, r7
 a8c:	73 2c       	mov	r7, r3
 a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <__stack+0x1a1>
 a90:	b7 01       	movw	r22, r14
 a92:	80 e2       	ldi	r24, 0x20	; 32
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	2c 87       	std	Y+12, r18	; 0x0c
 a98:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 a9c:	73 94       	inc	r7
 a9e:	2c 85       	ldd	r18, Y+12	; 0x0c
 aa0:	73 14       	cp	r7, r3
 aa2:	b0 f3       	brcs	.-20     	; 0xa90 <__stack+0x191>
 aa4:	04 c0       	rjmp	.+8      	; 0xaae <__stack+0x1af>
 aa6:	73 14       	cp	r7, r3
 aa8:	10 f4       	brcc	.+4      	; 0xaae <__stack+0x1af>
 aaa:	37 18       	sub	r3, r7
 aac:	01 c0       	rjmp	.+2      	; 0xab0 <__stack+0x1b1>
 aae:	31 2c       	mov	r3, r1
 ab0:	24 ff       	sbrs	r18, 4
 ab2:	12 c0       	rjmp	.+36     	; 0xad8 <__stack+0x1d9>
 ab4:	b7 01       	movw	r22, r14
 ab6:	80 e3       	ldi	r24, 0x30	; 48
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	2c 87       	std	Y+12, r18	; 0x0c
 abc:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 ac0:	2c 85       	ldd	r18, Y+12	; 0x0c
 ac2:	22 ff       	sbrs	r18, 2
 ac4:	1e c0       	rjmp	.+60     	; 0xb02 <__stack+0x203>
 ac6:	21 ff       	sbrs	r18, 1
 ac8:	03 c0       	rjmp	.+6      	; 0xad0 <__stack+0x1d1>
 aca:	88 e5       	ldi	r24, 0x58	; 88
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <__stack+0x1d5>
 ad0:	88 e7       	ldi	r24, 0x78	; 120
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	b7 01       	movw	r22, r14
 ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <__stack+0x1f1>
 ad8:	82 2f       	mov	r24, r18
 ada:	86 78       	andi	r24, 0x86	; 134
 adc:	91 f0       	breq	.+36     	; 0xb02 <__stack+0x203>
 ade:	21 fd       	sbrc	r18, 1
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <__stack+0x1e7>
 ae2:	80 e2       	ldi	r24, 0x20	; 32
 ae4:	01 c0       	rjmp	.+2      	; 0xae8 <__stack+0x1e9>
 ae6:	8b e2       	ldi	r24, 0x2B	; 43
 ae8:	27 fd       	sbrc	r18, 7
 aea:	8d e2       	ldi	r24, 0x2D	; 45
 aec:	b7 01       	movw	r22, r14
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 af4:	06 c0       	rjmp	.+12     	; 0xb02 <__stack+0x203>
 af6:	b7 01       	movw	r22, r14
 af8:	80 e3       	ldi	r24, 0x30	; 48
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 b00:	5a 94       	dec	r5
 b02:	a5 14       	cp	r10, r5
 b04:	c0 f3       	brcs	.-16     	; 0xaf6 <__stack+0x1f7>
 b06:	aa 94       	dec	r10
 b08:	f4 01       	movw	r30, r8
 b0a:	ea 0d       	add	r30, r10
 b0c:	f1 1d       	adc	r31, r1
 b0e:	b7 01       	movw	r22, r14
 b10:	80 81       	ld	r24, Z
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 b18:	a1 10       	cpse	r10, r1
 b1a:	f5 cf       	rjmp	.-22     	; 0xb06 <__stack+0x207>
 b1c:	06 c0       	rjmp	.+12     	; 0xb2a <__stack+0x22b>
 b1e:	b7 01       	movw	r22, r14
 b20:	80 e2       	ldi	r24, 0x20	; 32
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 b28:	3a 94       	dec	r3
 b2a:	31 10       	cpse	r3, r1
 b2c:	f8 cf       	rjmp	.-16     	; 0xb1e <__stack+0x21f>
 b2e:	43 ce       	rjmp	.-890    	; 0x7b6 <vfprintf+0x28>
 b30:	f7 01       	movw	r30, r14
 b32:	26 81       	ldd	r18, Z+6	; 0x06
 b34:	37 81       	ldd	r19, Z+7	; 0x07
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <__stack+0x23d>
 b38:	2f ef       	ldi	r18, 0xFF	; 255
 b3a:	3f ef       	ldi	r19, 0xFF	; 255
 b3c:	c9 01       	movw	r24, r18
 b3e:	2c 96       	adiw	r28, 0x0c	; 12
 b40:	e2 e1       	ldi	r30, 0x12	; 18
 b42:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__epilogue_restores__>

00000b46 <calloc>:
 b46:	0f 93       	push	r16
 b48:	1f 93       	push	r17
 b4a:	cf 93       	push	r28
 b4c:	df 93       	push	r29
 b4e:	68 9f       	mul	r22, r24
 b50:	80 01       	movw	r16, r0
 b52:	69 9f       	mul	r22, r25
 b54:	10 0d       	add	r17, r0
 b56:	78 9f       	mul	r23, r24
 b58:	10 0d       	add	r17, r0
 b5a:	11 24       	eor	r1, r1
 b5c:	c8 01       	movw	r24, r16
 b5e:	0e 94 c1 05 	call	0xb82	; 0xb82 <malloc>
 b62:	c8 2f       	mov	r28, r24
 b64:	d9 2f       	mov	r29, r25
 b66:	20 97       	sbiw	r28, 0x00	; 0
 b68:	31 f0       	breq	.+12     	; 0xb76 <calloc+0x30>
 b6a:	a8 01       	movw	r20, r16
 b6c:	60 e0       	ldi	r22, 0x00	; 0
 b6e:	70 e0       	ldi	r23, 0x00	; 0
 b70:	8c 2f       	mov	r24, r28
 b72:	0e 94 04 07 	call	0xe08	; 0xe08 <memset>
 b76:	ce 01       	movw	r24, r28
 b78:	df 91       	pop	r29
 b7a:	cf 91       	pop	r28
 b7c:	1f 91       	pop	r17
 b7e:	0f 91       	pop	r16
 b80:	08 95       	ret

00000b82 <malloc>:
 b82:	0f 93       	push	r16
 b84:	1f 93       	push	r17
 b86:	cf 93       	push	r28
 b88:	df 93       	push	r29
 b8a:	82 30       	cpi	r24, 0x02	; 2
 b8c:	91 05       	cpc	r25, r1
 b8e:	10 f4       	brcc	.+4      	; 0xb94 <malloc+0x12>
 b90:	82 e0       	ldi	r24, 0x02	; 2
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	e0 91 77 02 	lds	r30, 0x0277
 b98:	f0 91 78 02 	lds	r31, 0x0278
 b9c:	20 e0       	ldi	r18, 0x00	; 0
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	c0 e0       	ldi	r28, 0x00	; 0
 ba2:	d0 e0       	ldi	r29, 0x00	; 0
 ba4:	23 c0       	rjmp	.+70     	; 0xbec <malloc+0x6a>
 ba6:	40 81       	ld	r20, Z
 ba8:	51 81       	ldd	r21, Z+1	; 0x01
 baa:	48 17       	cp	r20, r24
 bac:	59 07       	cpc	r21, r25
 bae:	a8 f0       	brcs	.+42     	; 0xbda <malloc+0x58>
 bb0:	48 17       	cp	r20, r24
 bb2:	59 07       	cpc	r21, r25
 bb4:	61 f4       	brne	.+24     	; 0xbce <malloc+0x4c>
 bb6:	82 81       	ldd	r24, Z+2	; 0x02
 bb8:	93 81       	ldd	r25, Z+3	; 0x03
 bba:	20 97       	sbiw	r28, 0x00	; 0
 bbc:	19 f0       	breq	.+6      	; 0xbc4 <malloc+0x42>
 bbe:	9b 83       	std	Y+3, r25	; 0x03
 bc0:	8a 83       	std	Y+2, r24	; 0x02
 bc2:	2e c0       	rjmp	.+92     	; 0xc20 <malloc+0x9e>
 bc4:	90 93 78 02 	sts	0x0278, r25
 bc8:	80 93 77 02 	sts	0x0277, r24
 bcc:	29 c0       	rjmp	.+82     	; 0xc20 <malloc+0x9e>
 bce:	21 15       	cp	r18, r1
 bd0:	31 05       	cpc	r19, r1
 bd2:	29 f0       	breq	.+10     	; 0xbde <malloc+0x5c>
 bd4:	42 17       	cp	r20, r18
 bd6:	53 07       	cpc	r21, r19
 bd8:	10 f0       	brcs	.+4      	; 0xbde <malloc+0x5c>
 bda:	a9 01       	movw	r20, r18
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <malloc+0x60>
 bde:	be 01       	movw	r22, r28
 be0:	df 01       	movw	r26, r30
 be2:	02 81       	ldd	r16, Z+2	; 0x02
 be4:	13 81       	ldd	r17, Z+3	; 0x03
 be6:	ef 01       	movw	r28, r30
 be8:	9a 01       	movw	r18, r20
 bea:	f8 01       	movw	r30, r16
 bec:	30 97       	sbiw	r30, 0x00	; 0
 bee:	d9 f6       	brne	.-74     	; 0xba6 <malloc+0x24>
 bf0:	21 15       	cp	r18, r1
 bf2:	31 05       	cpc	r19, r1
 bf4:	09 f1       	breq	.+66     	; 0xc38 <malloc+0xb6>
 bf6:	28 1b       	sub	r18, r24
 bf8:	39 0b       	sbc	r19, r25
 bfa:	24 30       	cpi	r18, 0x04	; 4
 bfc:	31 05       	cpc	r19, r1
 bfe:	90 f4       	brcc	.+36     	; 0xc24 <malloc+0xa2>
 c00:	12 96       	adiw	r26, 0x02	; 2
 c02:	8d 91       	ld	r24, X+
 c04:	9c 91       	ld	r25, X
 c06:	13 97       	sbiw	r26, 0x03	; 3
 c08:	61 15       	cp	r22, r1
 c0a:	71 05       	cpc	r23, r1
 c0c:	21 f0       	breq	.+8      	; 0xc16 <malloc+0x94>
 c0e:	fb 01       	movw	r30, r22
 c10:	93 83       	std	Z+3, r25	; 0x03
 c12:	82 83       	std	Z+2, r24	; 0x02
 c14:	04 c0       	rjmp	.+8      	; 0xc1e <malloc+0x9c>
 c16:	90 93 78 02 	sts	0x0278, r25
 c1a:	80 93 77 02 	sts	0x0277, r24
 c1e:	fd 01       	movw	r30, r26
 c20:	32 96       	adiw	r30, 0x02	; 2
 c22:	44 c0       	rjmp	.+136    	; 0xcac <malloc+0x12a>
 c24:	fd 01       	movw	r30, r26
 c26:	e2 0f       	add	r30, r18
 c28:	f3 1f       	adc	r31, r19
 c2a:	81 93       	st	Z+, r24
 c2c:	91 93       	st	Z+, r25
 c2e:	22 50       	subi	r18, 0x02	; 2
 c30:	31 09       	sbc	r19, r1
 c32:	2d 93       	st	X+, r18
 c34:	3c 93       	st	X, r19
 c36:	3a c0       	rjmp	.+116    	; 0xcac <malloc+0x12a>
 c38:	20 91 75 02 	lds	r18, 0x0275
 c3c:	30 91 76 02 	lds	r19, 0x0276
 c40:	23 2b       	or	r18, r19
 c42:	41 f4       	brne	.+16     	; 0xc54 <malloc+0xd2>
 c44:	20 91 02 01 	lds	r18, 0x0102
 c48:	30 91 03 01 	lds	r19, 0x0103
 c4c:	30 93 76 02 	sts	0x0276, r19
 c50:	20 93 75 02 	sts	0x0275, r18
 c54:	20 91 00 01 	lds	r18, 0x0100
 c58:	30 91 01 01 	lds	r19, 0x0101
 c5c:	21 15       	cp	r18, r1
 c5e:	31 05       	cpc	r19, r1
 c60:	41 f4       	brne	.+16     	; 0xc72 <malloc+0xf0>
 c62:	2d b7       	in	r18, 0x3d	; 61
 c64:	3e b7       	in	r19, 0x3e	; 62
 c66:	40 91 04 01 	lds	r20, 0x0104
 c6a:	50 91 05 01 	lds	r21, 0x0105
 c6e:	24 1b       	sub	r18, r20
 c70:	35 0b       	sbc	r19, r21
 c72:	e0 91 75 02 	lds	r30, 0x0275
 c76:	f0 91 76 02 	lds	r31, 0x0276
 c7a:	e2 17       	cp	r30, r18
 c7c:	f3 07       	cpc	r31, r19
 c7e:	a0 f4       	brcc	.+40     	; 0xca8 <malloc+0x126>
 c80:	2e 1b       	sub	r18, r30
 c82:	3f 0b       	sbc	r19, r31
 c84:	28 17       	cp	r18, r24
 c86:	39 07       	cpc	r19, r25
 c88:	78 f0       	brcs	.+30     	; 0xca8 <malloc+0x126>
 c8a:	ac 01       	movw	r20, r24
 c8c:	4e 5f       	subi	r20, 0xFE	; 254
 c8e:	5f 4f       	sbci	r21, 0xFF	; 255
 c90:	24 17       	cp	r18, r20
 c92:	35 07       	cpc	r19, r21
 c94:	48 f0       	brcs	.+18     	; 0xca8 <malloc+0x126>
 c96:	4e 0f       	add	r20, r30
 c98:	5f 1f       	adc	r21, r31
 c9a:	50 93 76 02 	sts	0x0276, r21
 c9e:	40 93 75 02 	sts	0x0275, r20
 ca2:	81 93       	st	Z+, r24
 ca4:	91 93       	st	Z+, r25
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <malloc+0x12a>
 ca8:	e0 e0       	ldi	r30, 0x00	; 0
 caa:	f0 e0       	ldi	r31, 0x00	; 0
 cac:	cf 01       	movw	r24, r30
 cae:	df 91       	pop	r29
 cb0:	cf 91       	pop	r28
 cb2:	1f 91       	pop	r17
 cb4:	0f 91       	pop	r16
 cb6:	08 95       	ret

00000cb8 <free>:
 cb8:	ef 92       	push	r14
 cba:	ff 92       	push	r15
 cbc:	0f 93       	push	r16
 cbe:	1f 93       	push	r17
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	00 97       	sbiw	r24, 0x00	; 0
 cc6:	09 f4       	brne	.+2      	; 0xcca <free+0x12>
 cc8:	8f c0       	rjmp	.+286    	; 0xde8 <free+0x130>
 cca:	dc 01       	movw	r26, r24
 ccc:	12 97       	sbiw	r26, 0x02	; 2
 cce:	13 96       	adiw	r26, 0x03	; 3
 cd0:	1c 92       	st	X, r1
 cd2:	1e 92       	st	-X, r1
 cd4:	12 97       	sbiw	r26, 0x02	; 2
 cd6:	e0 90 77 02 	lds	r14, 0x0277
 cda:	f0 90 78 02 	lds	r15, 0x0278
 cde:	e1 14       	cp	r14, r1
 ce0:	f1 04       	cpc	r15, r1
 ce2:	89 f4       	brne	.+34     	; 0xd06 <free+0x4e>
 ce4:	2d 91       	ld	r18, X+
 ce6:	3c 91       	ld	r19, X
 ce8:	11 97       	sbiw	r26, 0x01	; 1
 cea:	28 0f       	add	r18, r24
 cec:	39 1f       	adc	r19, r25
 cee:	80 91 75 02 	lds	r24, 0x0275
 cf2:	90 91 76 02 	lds	r25, 0x0276
 cf6:	82 17       	cp	r24, r18
 cf8:	93 07       	cpc	r25, r19
 cfa:	89 f5       	brne	.+98     	; 0xd5e <free+0xa6>
 cfc:	b0 93 76 02 	sts	0x0276, r27
 d00:	a0 93 75 02 	sts	0x0275, r26
 d04:	71 c0       	rjmp	.+226    	; 0xde8 <free+0x130>
 d06:	e7 01       	movw	r28, r14
 d08:	20 e0       	ldi	r18, 0x00	; 0
 d0a:	30 e0       	ldi	r19, 0x00	; 0
 d0c:	01 c0       	rjmp	.+2      	; 0xd10 <free+0x58>
 d0e:	ea 01       	movw	r28, r20
 d10:	ca 17       	cp	r28, r26
 d12:	db 07       	cpc	r29, r27
 d14:	38 f4       	brcc	.+14     	; 0xd24 <free+0x6c>
 d16:	4a 81       	ldd	r20, Y+2	; 0x02
 d18:	5b 81       	ldd	r21, Y+3	; 0x03
 d1a:	9e 01       	movw	r18, r28
 d1c:	41 15       	cp	r20, r1
 d1e:	51 05       	cpc	r21, r1
 d20:	b1 f7       	brne	.-20     	; 0xd0e <free+0x56>
 d22:	22 c0       	rjmp	.+68     	; 0xd68 <free+0xb0>
 d24:	bc 01       	movw	r22, r24
 d26:	62 50       	subi	r22, 0x02	; 2
 d28:	71 09       	sbc	r23, r1
 d2a:	fb 01       	movw	r30, r22
 d2c:	d3 83       	std	Z+3, r29	; 0x03
 d2e:	c2 83       	std	Z+2, r28	; 0x02
 d30:	00 81       	ld	r16, Z
 d32:	11 81       	ldd	r17, Z+1	; 0x01
 d34:	ac 01       	movw	r20, r24
 d36:	40 0f       	add	r20, r16
 d38:	51 1f       	adc	r21, r17
 d3a:	4c 17       	cp	r20, r28
 d3c:	5d 07       	cpc	r21, r29
 d3e:	61 f4       	brne	.+24     	; 0xd58 <free+0xa0>
 d40:	48 81       	ld	r20, Y
 d42:	59 81       	ldd	r21, Y+1	; 0x01
 d44:	40 0f       	add	r20, r16
 d46:	51 1f       	adc	r21, r17
 d48:	4e 5f       	subi	r20, 0xFE	; 254
 d4a:	5f 4f       	sbci	r21, 0xFF	; 255
 d4c:	51 83       	std	Z+1, r21	; 0x01
 d4e:	40 83       	st	Z, r20
 d50:	4a 81       	ldd	r20, Y+2	; 0x02
 d52:	5b 81       	ldd	r21, Y+3	; 0x03
 d54:	53 83       	std	Z+3, r21	; 0x03
 d56:	42 83       	std	Z+2, r20	; 0x02
 d58:	21 15       	cp	r18, r1
 d5a:	31 05       	cpc	r19, r1
 d5c:	29 f4       	brne	.+10     	; 0xd68 <free+0xb0>
 d5e:	b0 93 78 02 	sts	0x0278, r27
 d62:	a0 93 77 02 	sts	0x0277, r26
 d66:	40 c0       	rjmp	.+128    	; 0xde8 <free+0x130>
 d68:	f9 01       	movw	r30, r18
 d6a:	b3 83       	std	Z+3, r27	; 0x03
 d6c:	a2 83       	std	Z+2, r26	; 0x02
 d6e:	e9 01       	movw	r28, r18
 d70:	69 91       	ld	r22, Y+
 d72:	79 91       	ld	r23, Y+
 d74:	c6 0f       	add	r28, r22
 d76:	d7 1f       	adc	r29, r23
 d78:	ac 17       	cp	r26, r28
 d7a:	bd 07       	cpc	r27, r29
 d7c:	79 f4       	brne	.+30     	; 0xd9c <free+0xe4>
 d7e:	dc 01       	movw	r26, r24
 d80:	5e 91       	ld	r21, -X
 d82:	4e 91       	ld	r20, -X
 d84:	46 0f       	add	r20, r22
 d86:	57 1f       	adc	r21, r23
 d88:	4e 5f       	subi	r20, 0xFE	; 254
 d8a:	5f 4f       	sbci	r21, 0xFF	; 255
 d8c:	51 83       	std	Z+1, r21	; 0x01
 d8e:	40 83       	st	Z, r20
 d90:	12 96       	adiw	r26, 0x02	; 2
 d92:	8d 91       	ld	r24, X+
 d94:	9c 91       	ld	r25, X
 d96:	13 97       	sbiw	r26, 0x03	; 3
 d98:	93 83       	std	Z+3, r25	; 0x03
 d9a:	82 83       	std	Z+2, r24	; 0x02
 d9c:	a0 e0       	ldi	r26, 0x00	; 0
 d9e:	b0 e0       	ldi	r27, 0x00	; 0
 da0:	02 c0       	rjmp	.+4      	; 0xda6 <free+0xee>
 da2:	d7 01       	movw	r26, r14
 da4:	7c 01       	movw	r14, r24
 da6:	f7 01       	movw	r30, r14
 da8:	82 81       	ldd	r24, Z+2	; 0x02
 daa:	93 81       	ldd	r25, Z+3	; 0x03
 dac:	00 97       	sbiw	r24, 0x00	; 0
 dae:	c9 f7       	brne	.-14     	; 0xda2 <free+0xea>
 db0:	c7 01       	movw	r24, r14
 db2:	02 96       	adiw	r24, 0x02	; 2
 db4:	20 81       	ld	r18, Z
 db6:	31 81       	ldd	r19, Z+1	; 0x01
 db8:	82 0f       	add	r24, r18
 dba:	93 1f       	adc	r25, r19
 dbc:	20 91 75 02 	lds	r18, 0x0275
 dc0:	30 91 76 02 	lds	r19, 0x0276
 dc4:	28 17       	cp	r18, r24
 dc6:	39 07       	cpc	r19, r25
 dc8:	79 f4       	brne	.+30     	; 0xde8 <free+0x130>
 dca:	10 97       	sbiw	r26, 0x00	; 0
 dcc:	29 f4       	brne	.+10     	; 0xdd8 <free+0x120>
 dce:	10 92 78 02 	sts	0x0278, r1
 dd2:	10 92 77 02 	sts	0x0277, r1
 dd6:	04 c0       	rjmp	.+8      	; 0xde0 <free+0x128>
 dd8:	13 96       	adiw	r26, 0x03	; 3
 dda:	1c 92       	st	X, r1
 ddc:	1e 92       	st	-X, r1
 dde:	12 97       	sbiw	r26, 0x02	; 2
 de0:	f0 92 76 02 	sts	0x0276, r15
 de4:	e0 92 75 02 	sts	0x0275, r14
 de8:	cd b7       	in	r28, 0x3d	; 61
 dea:	de b7       	in	r29, 0x3e	; 62
 dec:	e6 e0       	ldi	r30, 0x06	; 6
 dee:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__epilogue_restores__+0x18>

00000df2 <strnlen_P>:
 df2:	fc 01       	movw	r30, r24
 df4:	05 90       	lpm	r0, Z+
 df6:	61 50       	subi	r22, 0x01	; 1
 df8:	70 40       	sbci	r23, 0x00	; 0
 dfa:	01 10       	cpse	r0, r1
 dfc:	d8 f7       	brcc	.-10     	; 0xdf4 <strnlen_P+0x2>
 dfe:	80 95       	com	r24
 e00:	90 95       	com	r25
 e02:	8e 0f       	add	r24, r30
 e04:	9f 1f       	adc	r25, r31
 e06:	08 95       	ret

00000e08 <memset>:
 e08:	dc 01       	movw	r26, r24
 e0a:	01 c0       	rjmp	.+2      	; 0xe0e <memset+0x6>
 e0c:	6d 93       	st	X+, r22
 e0e:	41 50       	subi	r20, 0x01	; 1
 e10:	50 40       	sbci	r21, 0x00	; 0
 e12:	e0 f7       	brcc	.-8      	; 0xe0c <memset+0x4>
 e14:	08 95       	ret

00000e16 <strnlen>:
 e16:	fc 01       	movw	r30, r24
 e18:	61 50       	subi	r22, 0x01	; 1
 e1a:	70 40       	sbci	r23, 0x00	; 0
 e1c:	01 90       	ld	r0, Z+
 e1e:	01 10       	cpse	r0, r1
 e20:	d8 f7       	brcc	.-10     	; 0xe18 <strnlen+0x2>
 e22:	80 95       	com	r24
 e24:	90 95       	com	r25
 e26:	8e 0f       	add	r24, r30
 e28:	9f 1f       	adc	r25, r31
 e2a:	08 95       	ret

00000e2c <fputc>:
 e2c:	0f 93       	push	r16
 e2e:	1f 93       	push	r17
 e30:	cf 93       	push	r28
 e32:	df 93       	push	r29
 e34:	8c 01       	movw	r16, r24
 e36:	eb 01       	movw	r28, r22
 e38:	8b 81       	ldd	r24, Y+3	; 0x03
 e3a:	81 fd       	sbrc	r24, 1
 e3c:	03 c0       	rjmp	.+6      	; 0xe44 <fputc+0x18>
 e3e:	0f ef       	ldi	r16, 0xFF	; 255
 e40:	1f ef       	ldi	r17, 0xFF	; 255
 e42:	1a c0       	rjmp	.+52     	; 0xe78 <fputc+0x4c>
 e44:	82 ff       	sbrs	r24, 2
 e46:	0d c0       	rjmp	.+26     	; 0xe62 <fputc+0x36>
 e48:	2e 81       	ldd	r18, Y+6	; 0x06
 e4a:	3f 81       	ldd	r19, Y+7	; 0x07
 e4c:	8c 81       	ldd	r24, Y+4	; 0x04
 e4e:	9d 81       	ldd	r25, Y+5	; 0x05
 e50:	28 17       	cp	r18, r24
 e52:	39 07       	cpc	r19, r25
 e54:	64 f4       	brge	.+24     	; 0xe6e <fputc+0x42>
 e56:	e8 81       	ld	r30, Y
 e58:	f9 81       	ldd	r31, Y+1	; 0x01
 e5a:	01 93       	st	Z+, r16
 e5c:	f9 83       	std	Y+1, r31	; 0x01
 e5e:	e8 83       	st	Y, r30
 e60:	06 c0       	rjmp	.+12     	; 0xe6e <fputc+0x42>
 e62:	e8 85       	ldd	r30, Y+8	; 0x08
 e64:	f9 85       	ldd	r31, Y+9	; 0x09
 e66:	80 2f       	mov	r24, r16
 e68:	09 95       	icall
 e6a:	89 2b       	or	r24, r25
 e6c:	41 f7       	brne	.-48     	; 0xe3e <fputc+0x12>
 e6e:	8e 81       	ldd	r24, Y+6	; 0x06
 e70:	9f 81       	ldd	r25, Y+7	; 0x07
 e72:	01 96       	adiw	r24, 0x01	; 1
 e74:	9f 83       	std	Y+7, r25	; 0x07
 e76:	8e 83       	std	Y+6, r24	; 0x06
 e78:	c8 01       	movw	r24, r16
 e7a:	df 91       	pop	r29
 e7c:	cf 91       	pop	r28
 e7e:	1f 91       	pop	r17
 e80:	0f 91       	pop	r16
 e82:	08 95       	ret

00000e84 <__ultoa_invert>:
 e84:	fa 01       	movw	r30, r20
 e86:	aa 27       	eor	r26, r26
 e88:	28 30       	cpi	r18, 0x08	; 8
 e8a:	51 f1       	breq	.+84     	; 0xee0 <__ultoa_invert+0x5c>
 e8c:	20 31       	cpi	r18, 0x10	; 16
 e8e:	81 f1       	breq	.+96     	; 0xef0 <__ultoa_invert+0x6c>
 e90:	e8 94       	clt
 e92:	6f 93       	push	r22
 e94:	6e 7f       	andi	r22, 0xFE	; 254
 e96:	6e 5f       	subi	r22, 0xFE	; 254
 e98:	7f 4f       	sbci	r23, 0xFF	; 255
 e9a:	8f 4f       	sbci	r24, 0xFF	; 255
 e9c:	9f 4f       	sbci	r25, 0xFF	; 255
 e9e:	af 4f       	sbci	r26, 0xFF	; 255
 ea0:	b1 e0       	ldi	r27, 0x01	; 1
 ea2:	3e d0       	rcall	.+124    	; 0xf20 <__ultoa_invert+0x9c>
 ea4:	b4 e0       	ldi	r27, 0x04	; 4
 ea6:	3c d0       	rcall	.+120    	; 0xf20 <__ultoa_invert+0x9c>
 ea8:	67 0f       	add	r22, r23
 eaa:	78 1f       	adc	r23, r24
 eac:	89 1f       	adc	r24, r25
 eae:	9a 1f       	adc	r25, r26
 eb0:	a1 1d       	adc	r26, r1
 eb2:	68 0f       	add	r22, r24
 eb4:	79 1f       	adc	r23, r25
 eb6:	8a 1f       	adc	r24, r26
 eb8:	91 1d       	adc	r25, r1
 eba:	a1 1d       	adc	r26, r1
 ebc:	6a 0f       	add	r22, r26
 ebe:	71 1d       	adc	r23, r1
 ec0:	81 1d       	adc	r24, r1
 ec2:	91 1d       	adc	r25, r1
 ec4:	a1 1d       	adc	r26, r1
 ec6:	20 d0       	rcall	.+64     	; 0xf08 <__ultoa_invert+0x84>
 ec8:	09 f4       	brne	.+2      	; 0xecc <__ultoa_invert+0x48>
 eca:	68 94       	set
 ecc:	3f 91       	pop	r19
 ece:	2a e0       	ldi	r18, 0x0A	; 10
 ed0:	26 9f       	mul	r18, r22
 ed2:	11 24       	eor	r1, r1
 ed4:	30 19       	sub	r19, r0
 ed6:	30 5d       	subi	r19, 0xD0	; 208
 ed8:	31 93       	st	Z+, r19
 eda:	de f6       	brtc	.-74     	; 0xe92 <__ultoa_invert+0xe>
 edc:	cf 01       	movw	r24, r30
 ede:	08 95       	ret
 ee0:	46 2f       	mov	r20, r22
 ee2:	47 70       	andi	r20, 0x07	; 7
 ee4:	40 5d       	subi	r20, 0xD0	; 208
 ee6:	41 93       	st	Z+, r20
 ee8:	b3 e0       	ldi	r27, 0x03	; 3
 eea:	0f d0       	rcall	.+30     	; 0xf0a <__ultoa_invert+0x86>
 eec:	c9 f7       	brne	.-14     	; 0xee0 <__ultoa_invert+0x5c>
 eee:	f6 cf       	rjmp	.-20     	; 0xedc <__ultoa_invert+0x58>
 ef0:	46 2f       	mov	r20, r22
 ef2:	4f 70       	andi	r20, 0x0F	; 15
 ef4:	40 5d       	subi	r20, 0xD0	; 208
 ef6:	4a 33       	cpi	r20, 0x3A	; 58
 ef8:	18 f0       	brcs	.+6      	; 0xf00 <__ultoa_invert+0x7c>
 efa:	49 5d       	subi	r20, 0xD9	; 217
 efc:	31 fd       	sbrc	r19, 1
 efe:	40 52       	subi	r20, 0x20	; 32
 f00:	41 93       	st	Z+, r20
 f02:	02 d0       	rcall	.+4      	; 0xf08 <__ultoa_invert+0x84>
 f04:	a9 f7       	brne	.-22     	; 0xef0 <__ultoa_invert+0x6c>
 f06:	ea cf       	rjmp	.-44     	; 0xedc <__ultoa_invert+0x58>
 f08:	b4 e0       	ldi	r27, 0x04	; 4
 f0a:	a6 95       	lsr	r26
 f0c:	97 95       	ror	r25
 f0e:	87 95       	ror	r24
 f10:	77 95       	ror	r23
 f12:	67 95       	ror	r22
 f14:	ba 95       	dec	r27
 f16:	c9 f7       	brne	.-14     	; 0xf0a <__ultoa_invert+0x86>
 f18:	00 97       	sbiw	r24, 0x00	; 0
 f1a:	61 05       	cpc	r22, r1
 f1c:	71 05       	cpc	r23, r1
 f1e:	08 95       	ret
 f20:	9b 01       	movw	r18, r22
 f22:	ac 01       	movw	r20, r24
 f24:	0a 2e       	mov	r0, r26
 f26:	06 94       	lsr	r0
 f28:	57 95       	ror	r21
 f2a:	47 95       	ror	r20
 f2c:	37 95       	ror	r19
 f2e:	27 95       	ror	r18
 f30:	ba 95       	dec	r27
 f32:	c9 f7       	brne	.-14     	; 0xf26 <__ultoa_invert+0xa2>
 f34:	62 0f       	add	r22, r18
 f36:	73 1f       	adc	r23, r19
 f38:	84 1f       	adc	r24, r20
 f3a:	95 1f       	adc	r25, r21
 f3c:	a0 1d       	adc	r26, r0
 f3e:	08 95       	ret

00000f40 <__prologue_saves__>:
 f40:	2f 92       	push	r2
 f42:	3f 92       	push	r3
 f44:	4f 92       	push	r4
 f46:	5f 92       	push	r5
 f48:	6f 92       	push	r6
 f4a:	7f 92       	push	r7
 f4c:	8f 92       	push	r8
 f4e:	9f 92       	push	r9
 f50:	af 92       	push	r10
 f52:	bf 92       	push	r11
 f54:	cf 92       	push	r12
 f56:	df 92       	push	r13
 f58:	ef 92       	push	r14
 f5a:	ff 92       	push	r15
 f5c:	0f 93       	push	r16
 f5e:	1f 93       	push	r17
 f60:	cf 93       	push	r28
 f62:	df 93       	push	r29
 f64:	cd b7       	in	r28, 0x3d	; 61
 f66:	de b7       	in	r29, 0x3e	; 62
 f68:	ca 1b       	sub	r28, r26
 f6a:	db 0b       	sbc	r29, r27
 f6c:	0f b6       	in	r0, 0x3f	; 63
 f6e:	f8 94       	cli
 f70:	de bf       	out	0x3e, r29	; 62
 f72:	0f be       	out	0x3f, r0	; 63
 f74:	cd bf       	out	0x3d, r28	; 61
 f76:	09 94       	ijmp

00000f78 <__epilogue_restores__>:
 f78:	2a 88       	ldd	r2, Y+18	; 0x12
 f7a:	39 88       	ldd	r3, Y+17	; 0x11
 f7c:	48 88       	ldd	r4, Y+16	; 0x10
 f7e:	5f 84       	ldd	r5, Y+15	; 0x0f
 f80:	6e 84       	ldd	r6, Y+14	; 0x0e
 f82:	7d 84       	ldd	r7, Y+13	; 0x0d
 f84:	8c 84       	ldd	r8, Y+12	; 0x0c
 f86:	9b 84       	ldd	r9, Y+11	; 0x0b
 f88:	aa 84       	ldd	r10, Y+10	; 0x0a
 f8a:	b9 84       	ldd	r11, Y+9	; 0x09
 f8c:	c8 84       	ldd	r12, Y+8	; 0x08
 f8e:	df 80       	ldd	r13, Y+7	; 0x07
 f90:	ee 80       	ldd	r14, Y+6	; 0x06
 f92:	fd 80       	ldd	r15, Y+5	; 0x05
 f94:	0c 81       	ldd	r16, Y+4	; 0x04
 f96:	1b 81       	ldd	r17, Y+3	; 0x03
 f98:	aa 81       	ldd	r26, Y+2	; 0x02
 f9a:	b9 81       	ldd	r27, Y+1	; 0x01
 f9c:	ce 0f       	add	r28, r30
 f9e:	d1 1d       	adc	r29, r1
 fa0:	0f b6       	in	r0, 0x3f	; 63
 fa2:	f8 94       	cli
 fa4:	de bf       	out	0x3e, r29	; 62
 fa6:	0f be       	out	0x3f, r0	; 63
 fa8:	cd bf       	out	0x3d, r28	; 61
 faa:	ed 01       	movw	r28, r26
 fac:	08 95       	ret

00000fae <_exit>:
 fae:	f8 94       	cli

00000fb0 <__stop_program>:
 fb0:	ff cf       	rjmp	.-2      	; 0xfb0 <__stop_program>
